import{r as n,o as s,c as a,a as p,w as t,F as e,d as o,b as c}from"./app.988c5f01.js";const l={},u=o("<p>仅记录对<code>N-api</code> 的使用方法以及函数签名。<em><strong>在<code>Windows</code> 平台下，如果我们安装的是32 位的Nodejs，<code>N-api</code> 应该是生成<code>32</code> 位的<code>.node</code> 文件，而且并没有启用<code>UNICODE</code> 的支持，即所有<code>_WIN64, UNICODE</code> 下的宏定义都是无效的</strong></em>。所以在Winodws 版本下的API 函数最好都调用<code>A</code> 结尾的。</p>",1),i=p("div",{class:"language-c ext-c line-numbers-mode"},[p("pre",{class:"language-c"},[p("code",null,[p("span",{class:"token comment"},"// 在Windows 系统下编译程序时，会针对目标平台改变某些宏定义。"),c("\n"),p("span",{class:"token comment"},"// 据此，我们可以输出这些结果，来判断编译结果的目标位宽"),c("\n"),p("span",{class:"token macro property"},[p("span",{class:"token directive-hash"},"#"),p("span",{class:"token directive keyword"},"ifndef"),c(),p("span",{class:"token expression"},"SIZE_MAX")]),c("\n  "),p("span",{class:"token macro property"},[p("span",{class:"token directive-hash"},"#"),p("span",{class:"token directive keyword"},"ifdef"),c(),p("span",{class:"token expression"},"_WIN64")]),c("\n "),p("span",{class:"token macro property"},[p("span",{class:"token directive-hash"},"#"),p("span",{class:"token directive keyword"},"define"),c(),p("span",{class:"token macro-name"},"SIZE_MAX"),c(),p("span",{class:"token expression"},[p("span",{class:"token number"},"0xffffffffffffffffu"),c("i64")])]),c("\n  "),p("span",{class:"token macro property"},[p("span",{class:"token directive-hash"},"#"),p("span",{class:"token directive keyword"},"else")]),c("\n "),p("span",{class:"token macro property"},[p("span",{class:"token directive-hash"},"#"),p("span",{class:"token directive keyword"},"define"),c(),p("span",{class:"token macro-name"},"SIZE_MAX"),c(),p("span",{class:"token expression"},[p("span",{class:"token number"},"0xffffffffu"),c("i32")])]),c("\n  "),p("span",{class:"token macro property"},[p("span",{class:"token directive-hash"},"#"),p("span",{class:"token directive keyword"},"endif")]),c("\n"),p("span",{class:"token macro property"},[p("span",{class:"token directive-hash"},"#"),p("span",{class:"token directive keyword"},"endif")]),c("\n\n"),p("span",{class:"token comment"},"// 而napi 自身的宏定义中，也只有关于_WIN32 的声明"),c("\n"),p("span",{class:"token macro property"},[p("span",{class:"token directive-hash"},"#"),p("span",{class:"token directive keyword"},"ifndef"),c(),p("span",{class:"token expression"},"NAPI_EXTERN")]),c("\n  "),p("span",{class:"token macro property"},[p("span",{class:"token directive-hash"},"#"),p("span",{class:"token directive keyword"},"ifdef"),c(),p("span",{class:"token expression"},"_WIN32")]),c("\n  "),p("span",{class:"token macro property"},[p("span",{class:"token directive-hash"},"#"),p("span",{class:"token directive keyword"},"define"),c(),p("span",{class:"token macro-name"},"NAPI_EXTERN"),c(),p("span",{class:"token expression"},[p("span",{class:"token function"},"__declspec"),p("span",{class:"token punctuation"},"("),c("dllexport"),p("span",{class:"token punctuation"},")")])]),c("\n  "),p("span",{class:"token macro property"},[p("span",{class:"token directive-hash"},"#"),p("span",{class:"token directive keyword"},"elif"),c(),p("span",{class:"token expression"},[p("span",{class:"token function"},"defined"),p("span",{class:"token punctuation"},"("),c("__wasm32__"),p("span",{class:"token punctuation"},")")])]),c("\n  "),p("span",{class:"token macro property"},[p("span",{class:"token directive-hash"},"#"),p("span",{class:"token directive keyword"},"define"),c(),p("span",{class:"token macro-name"},"NAPI_EXTERN"),c(),p("span",{class:"token expression"},[p("span",{class:"token keyword"},"__attribute__"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},"("),p("span",{class:"token function"},"visibility"),p("span",{class:"token punctuation"},"(")]),p("span",{class:"token string"},'"default"'),p("span",{class:"token expression"},[p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},")"),c("  \\  "),p("span",{class:"token keyword"},"__attribute__"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},"("),p("span",{class:"token function"},"__import_module__"),p("span",{class:"token punctuation"},"(")]),p("span",{class:"token string"},'"napi"'),p("span",{class:"token expression"},[p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},")")])]),c("\n  "),p("span",{class:"token macro property"},[p("span",{class:"token directive-hash"},"#"),p("span",{class:"token directive keyword"},"else")]),c("\n  "),p("span",{class:"token macro property"},[p("span",{class:"token directive-hash"},"#"),p("span",{class:"token directive keyword"},"define"),c(),p("span",{class:"token macro-name"},"NAPI_EXTERN"),c(),p("span",{class:"token expression"},[p("span",{class:"token keyword"},"__attribute__"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},"("),p("span",{class:"token function"},"visibility"),p("span",{class:"token punctuation"},"(")]),p("span",{class:"token string"},'"default"'),p("span",{class:"token expression"},[p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},")")])]),c("\n  "),p("span",{class:"token macro property"},[p("span",{class:"token directive-hash"},"#"),p("span",{class:"token directive keyword"},"endif")]),c("\n"),p("span",{class:"token macro property"},[p("span",{class:"token directive-hash"},"#"),p("span",{class:"token directive keyword"},"endif")]),c("\n")])]),p("div",{class:"highlight-lines"},[p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("div",{class:"highlight-line"}," "),p("br"),p("br"),p("br"),p("br"),p("br"),p("div",{class:"highlight-line"}," "),p("div",{class:"highlight-line"}," "),p("br"),p("br"),p("br"),p("br"),p("br"),p("br")]),p("div",{class:"line-numbers"},[p("span",{class:"line-number"},"1"),p("br"),p("span",{class:"line-number"},"2"),p("br"),p("span",{class:"line-number"},"3"),p("br"),p("span",{class:"line-number"},"4"),p("br"),p("span",{class:"line-number"},"5"),p("br"),p("span",{class:"line-number"},"6"),p("br"),p("span",{class:"line-number"},"7"),p("br"),p("span",{class:"line-number"},"8"),p("br"),p("span",{class:"line-number"},"9"),p("br"),p("span",{class:"line-number"},"10"),p("br"),p("span",{class:"line-number"},"11"),p("br"),p("span",{class:"line-number"},"12"),p("br"),p("span",{class:"line-number"},"13"),p("br"),p("span",{class:"line-number"},"14"),p("br"),p("span",{class:"line-number"},"15"),p("br"),p("span",{class:"line-number"},"16"),p("br"),p("span",{class:"line-number"},"17"),p("br"),p("span",{class:"line-number"},"18"),p("br"),p("span",{class:"line-number"},"19"),p("br"),p("span",{class:"line-number"},"20"),p("br")])],-1),r=p("h2",{id:"一般函数"},[p("a",{class:"header-anchor",href:"#一般函数"},"#"),c(" 一般函数")],-1),k=p("p",null,[c("最原始的"),p("code",null,"N-api"),c(" 的代码是"),p("code",null,"C"),c(" 风格的。所以函数的调用也都是面向过程的风格，写起来会比较啰嗦。")],-1),b=p("div",{class:"language-c ext-c line-numbers-mode"},[p("pre",{class:"language-c"},[p("code",null,[p("span",{class:"token macro property"},[p("span",{class:"token directive-hash"},"#"),p("span",{class:"token directive keyword"},"include"),c(),p("span",{class:"token string"},"<assert.h>")]),c("\n"),p("span",{class:"token macro property"},[p("span",{class:"token directive-hash"},"#"),p("span",{class:"token directive keyword"},"include"),c(),p("span",{class:"token string"},"<node_api.h>")]),c("\n"),p("span",{class:"token comment"},"/**\n* 函数：n-api 的函数一般由五部分组成  \n* - 函数名。一般用static 修饰符\n* - 形参1：napi_env。用于获取函数调用时的环境\n* - 形参2：napi_callback_info。用于传递函数调用时的实参\n* - 返回值：napi_value。napi 中所有的数据都使用napi_value 封装 \n* - 运行状态：napi_status。通过assert 断言函数运行状态\n*/"),c("\n"),p("span",{class:"token keyword"},"static"),c(" napi_value "),p("span",{class:"token function"},"Method"),p("span",{class:"token punctuation"},"("),c("napi_env env"),p("span",{class:"token punctuation"},","),c(" napi_callback_info info"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token punctuation"},"{"),c("\n  napi_status status"),p("span",{class:"token punctuation"},";"),c("\n  napi_value world"),p("span",{class:"token punctuation"},";"),c("\n  "),p("span",{class:"token comment"},"// 这里我修改了示例代码，用来验证编译的目标平台是32 位的"),c("\n  "),p("span",{class:"token comment"},'// status = napi_create_string_utf8(env, "world", 5, &world);'),c("\n  status "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"napi_create_bigint_int64"),p("span",{class:"token punctuation"},"("),c("env"),p("span",{class:"token punctuation"},","),c(" NAPI_AUTO_LENGTH"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token operator"},"&"),c("world"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n  "),p("span",{class:"token function"},"assert"),p("span",{class:"token punctuation"},"("),c("status "),p("span",{class:"token operator"},"=="),c(" napi_ok"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("  "),p("span",{class:"token comment"},"// 运行结果断言"),c("\n  "),p("span",{class:"token keyword"},"return"),c(" world"),p("span",{class:"token punctuation"},";"),c("\n"),p("span",{class:"token punctuation"},"}"),c("\n\n"),p("span",{class:"token comment"},"/** 对象属性的描述符，这条宏命令最终被解释为下面结构体：\n* typedef struct {\n*  // utf8name or name 应该至少有一个为空.\n*  const char* utf8name;  // name\n*  napi_value name;  // 0:NULL\n*\n*  napi_callback method;  // func 函数的指针\n*  napi_callback getter;  // 0:NULL\n*  napi_callback setter;  // 0:NULL\n*  napi_value value; // 0:NULL\n*\n*  napi_property_attributes attributes;  // 对应默认、可写、可枚举、可配置的属性\n*  void* data; // 0:NULL\n*} napi_property_descriptor;\n*/"),c("\n"),p("span",{class:"token macro property"},[p("span",{class:"token directive-hash"},"#"),p("span",{class:"token directive keyword"},"define"),c(),p("span",{class:"token macro-name function"},"DECLARE_NAPI_METHOD"),p("span",{class:"token expression"},[p("span",{class:"token punctuation"},"("),c("name"),p("span",{class:"token punctuation"},","),c(" func"),p("span",{class:"token punctuation"},")"),c()]),p("span",{class:"token punctuation"},"\\"),c("\n  "),p("span",{class:"token expression"},[p("span",{class:"token punctuation"},"{"),c(" name"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},","),c(" func"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},","),c(" napi_default"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token number"},"0"),c(),p("span",{class:"token punctuation"},"}")])]),c("\n"),p("span",{class:"token comment"},"// 一个普通函数描述符的结构体"),c("\n\n"),p("span",{class:"token comment"},"/**\n* 初始化函数。需要接收exports 对象，进行修改后再返回\n*\n* 定义JS 对象属性：\n* napi_define_properties(napi_env env, // \n* napi_value object, // 被操作的对象\n* size_t property_count, // 属性（数组内元素）数量\n* const napi_property_descriptor* properties);  \n* // 属性描述符（数组）的指针\n* 其实这里对应的是一个属性数组与其内部元素的数量。\n*/"),c("\n"),p("span",{class:"token keyword"},"static"),c(" napi_value "),p("span",{class:"token function"},"Init"),p("span",{class:"token punctuation"},"("),c("napi_env env"),p("span",{class:"token punctuation"},","),c(" napi_value exports"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token punctuation"},"{"),c("\n  napi_status status"),p("span",{class:"token punctuation"},";"),c("\n  napi_property_descriptor desc "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"DECLARE_NAPI_METHOD"),p("span",{class:"token punctuation"},"("),p("span",{class:"token string"},'"hello"'),p("span",{class:"token punctuation"},","),c(" Method"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n  status "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"napi_define_properties"),p("span",{class:"token punctuation"},"("),c("env"),p("span",{class:"token punctuation"},","),c(" exports"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token operator"},"&"),c("desc"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n  "),p("span",{class:"token function"},"assert"),p("span",{class:"token punctuation"},"("),c("status "),p("span",{class:"token operator"},"=="),c(" napi_ok"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n  "),p("span",{class:"token keyword"},"return"),c(" exports"),p("span",{class:"token punctuation"},";"),c("\n"),p("span",{class:"token punctuation"},"}"),c("\n\n"),p("span",{class:"token comment"},"// 最终注册插件的宏命令，一般保持默认即可"),c("\n"),p("span",{class:"token function"},"NAPI_MODULE"),p("span",{class:"token punctuation"},"("),c("NODE_GYP_MODULE_NAME"),p("span",{class:"token punctuation"},","),c(" Init"),p("span",{class:"token punctuation"},")"),c("\n")])]),p("div",{class:"highlight-lines"},[p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("div",{class:"highlight-line"}," "),p("div",{class:"highlight-line"}," "),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br"),p("br")]),p("div",{class:"line-numbers"},[p("span",{class:"line-number"},"1"),p("br"),p("span",{class:"line-number"},"2"),p("br"),p("span",{class:"line-number"},"3"),p("br"),p("span",{class:"line-number"},"4"),p("br"),p("span",{class:"line-number"},"5"),p("br"),p("span",{class:"line-number"},"6"),p("br"),p("span",{class:"line-number"},"7"),p("br"),p("span",{class:"line-number"},"8"),p("br"),p("span",{class:"line-number"},"9"),p("br"),p("span",{class:"line-number"},"10"),p("br"),p("span",{class:"line-number"},"11"),p("br"),p("span",{class:"line-number"},"12"),p("br"),p("span",{class:"line-number"},"13"),p("br"),p("span",{class:"line-number"},"14"),p("br"),p("span",{class:"line-number"},"15"),p("br"),p("span",{class:"line-number"},"16"),p("br"),p("span",{class:"line-number"},"17"),p("br"),p("span",{class:"line-number"},"18"),p("br"),p("span",{class:"line-number"},"19"),p("br"),p("span",{class:"line-number"},"20"),p("br"),p("span",{class:"line-number"},"21"),p("br"),p("span",{class:"line-number"},"22"),p("br"),p("span",{class:"line-number"},"23"),p("br"),p("span",{class:"line-number"},"24"),p("br"),p("span",{class:"line-number"},"25"),p("br"),p("span",{class:"line-number"},"26"),p("br"),p("span",{class:"line-number"},"27"),p("br"),p("span",{class:"line-number"},"28"),p("br"),p("span",{class:"line-number"},"29"),p("br"),p("span",{class:"line-number"},"30"),p("br"),p("span",{class:"line-number"},"31"),p("br"),p("span",{class:"line-number"},"32"),p("br"),p("span",{class:"line-number"},"33"),p("br"),p("span",{class:"line-number"},"34"),p("br"),p("span",{class:"line-number"},"35"),p("br"),p("span",{class:"line-number"},"36"),p("br"),p("span",{class:"line-number"},"37"),p("br"),p("span",{class:"line-number"},"38"),p("br"),p("span",{class:"line-number"},"39"),p("br"),p("span",{class:"line-number"},"40"),p("br"),p("span",{class:"line-number"},"41"),p("br"),p("span",{class:"line-number"},"42"),p("br"),p("span",{class:"line-number"},"43"),p("br"),p("span",{class:"line-number"},"44"),p("br"),p("span",{class:"line-number"},"45"),p("br"),p("span",{class:"line-number"},"46"),p("br"),p("span",{class:"line-number"},"47"),p("br"),p("span",{class:"line-number"},"48"),p("br"),p("span",{class:"line-number"},"49"),p("br"),p("span",{class:"line-number"},"50"),p("br"),p("span",{class:"line-number"},"51"),p("br"),p("span",{class:"line-number"},"52"),p("br"),p("span",{class:"line-number"},"53"),p("br"),p("span",{class:"line-number"},"54"),p("br"),p("span",{class:"line-number"},"55"),p("br"),p("span",{class:"line-number"},"56"),p("br"),p("span",{class:"line-number"},"57"),p("br"),p("span",{class:"line-number"},"58"),p("br"),p("span",{class:"line-number"},"59"),p("br"),p("span",{class:"line-number"},"60"),p("br")])],-1),_=p("div",{class:"language-c ext-c line-numbers-mode"},[p("pre",{class:"language-c"},[p("code",null,[p("span",{class:"token keyword"},"typedef"),c(),p("span",{class:"token keyword"},"enum"),c(),p("span",{class:"token punctuation"},"{"),c("\n  napi_ok"),p("span",{class:"token punctuation"},","),c("\n  napi_invalid_arg"),p("span",{class:"token punctuation"},","),c("\n  napi_object_expected"),p("span",{class:"token punctuation"},","),c("\n  napi_string_expected"),p("span",{class:"token punctuation"},","),c("\n  napi_name_expected"),p("span",{class:"token punctuation"},","),c("\n  napi_function_expected"),p("span",{class:"token punctuation"},","),c("\n  napi_number_expected"),p("span",{class:"token punctuation"},","),c("\n  napi_boolean_expected"),p("span",{class:"token punctuation"},","),c("\n  napi_array_expected"),p("span",{class:"token punctuation"},","),c("\n  napi_generic_failure"),p("span",{class:"token punctuation"},","),c("\n  napi_pending_exception"),p("span",{class:"token punctuation"},","),c("\n  napi_cancelled"),p("span",{class:"token punctuation"},","),c("\n  napi_escape_called_twice"),p("span",{class:"token punctuation"},","),c("\n  napi_handle_scope_mismatch"),p("span",{class:"token punctuation"},","),c("\n  napi_callback_scope_mismatch"),p("span",{class:"token punctuation"},","),c("\n  napi_queue_full"),p("span",{class:"token punctuation"},","),c("\n  napi_closing"),p("span",{class:"token punctuation"},","),c("\n  napi_bigint_expected"),p("span",{class:"token punctuation"},","),c("\n  napi_date_expected"),p("span",{class:"token punctuation"},","),c("\n  napi_arraybuffer_expected"),p("span",{class:"token punctuation"},","),c("\n  napi_detachable_arraybuffer_expected"),p("span",{class:"token punctuation"},","),c("\n  napi_would_deadlock  "),p("span",{class:"token comment"},"// unused"),c("\n"),p("span",{class:"token punctuation"},"}"),c(" napi_status"),p("span",{class:"token punctuation"},";"),c("\n")])]),p("div",{class:"line-numbers"},[p("span",{class:"line-number"},"1"),p("br"),p("span",{class:"line-number"},"2"),p("br"),p("span",{class:"line-number"},"3"),p("br"),p("span",{class:"line-number"},"4"),p("br"),p("span",{class:"line-number"},"5"),p("br"),p("span",{class:"line-number"},"6"),p("br"),p("span",{class:"line-number"},"7"),p("br"),p("span",{class:"line-number"},"8"),p("br"),p("span",{class:"line-number"},"9"),p("br"),p("span",{class:"line-number"},"10"),p("br"),p("span",{class:"line-number"},"11"),p("br"),p("span",{class:"line-number"},"12"),p("br"),p("span",{class:"line-number"},"13"),p("br"),p("span",{class:"line-number"},"14"),p("br"),p("span",{class:"line-number"},"15"),p("br"),p("span",{class:"line-number"},"16"),p("br"),p("span",{class:"line-number"},"17"),p("br"),p("span",{class:"line-number"},"18"),p("br"),p("span",{class:"line-number"},"19"),p("br"),p("span",{class:"line-number"},"20"),p("br"),p("span",{class:"line-number"},"21"),p("br"),p("span",{class:"line-number"},"22"),p("br"),p("span",{class:"line-number"},"23"),p("br"),p("span",{class:"line-number"},"24"),p("br")])],-1),m=o('<h2 id="一般数据"><a class="header-anchor" href="#一般数据">#</a> 一般数据</h2><p>好像我们并不能看到<code>N-api</code> 中关于数据的具体定义，但是这并不影响我们可以通过一系列的函数来构造或者解析<code>JS</code> 数据。虽然下面的代码看起来很多很吓人，但无外乎数据的获取、转换、设置，在JS 中，函数也是一种数据。<br><strong>一般在调用<code>napi</code> 函数时，返回值都是<code>napi_status</code> 类型，所以需要预先声明一个<code>napi_vlaue</code> 用来存储函数返回值，具体操作为在调用函数时将传入返回值的指针</strong></p><details class="custom-container details"><summary>数据处理的方法</summary><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// 经过实验得知：</span>\n<span class="token comment">// napi 插件开发是基于32 位的，也就是说_WIN64 下定义的类型是不适用的</span>\n<span class="token comment">//  0xffffffffui32</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NAPI_AUTO_LENGTH</span> <span class="token expression">SIZE_MAX  </span></span>\n\n<span class="token comment">// 获取更详细的运行数据</span>\n<span class="token function">napi_get_last_error_info</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> <span class="token keyword">const</span> napi_extended_error_info<span class="token operator">*</span><span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Getters for defined singletons/个人理解为获取预定义的数据类型</span>\nNAPI_EXTERN napi_status <span class="token function">napi_get_undefined</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_get_null</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_get_global</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_get_boolean</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> bool value<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 创建原始对象或方法。一般来说是需要传入具体数据的，如果没有传入的话，默认就是空对象</span>\nNAPI_EXTERN napi_status <span class="token function">napi_create_object</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_create_array</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_create_array_with_length</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> <span class="token class-name">size_t</span> length<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_create_double</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> <span class="token keyword">double</span> value<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_create_int32</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> <span class="token class-name">int32_t</span> value<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_create_uint32</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> value<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_create_int64</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> <span class="token class-name">int64_t</span> value<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_create_string_latin1</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">,</span> <span class="token class-name">size_t</span> length<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_create_string_utf8</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">,</span> <span class="token class-name">size_t</span> length<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_create_string_utf16</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">char16_t</span><span class="token operator">*</span> str<span class="token punctuation">,</span> <span class="token class-name">size_t</span> length<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_create_symbol</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value description<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_create_function</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> utf8name<span class="token punctuation">,</span> <span class="token class-name">size_t</span> length<span class="token punctuation">,</span> napi_callback cb<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> data<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_create_error</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value code<span class="token punctuation">,</span> napi_value msg<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_create_type_error</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value code<span class="token punctuation">,</span> napi_value msg<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_create_range_error</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value code<span class="token punctuation">,</span> napi_value msg<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n<span class="token comment">/**\n* 获取原始数据类型的方法\n* typedef enum {\n*  // ES6 types (corresponds to typeof)\n*  napi_undefined,\n*  napi_null,\n*  napi_boolean,\n*  napi_number,\n*  napi_string,\n*  napi_symbol,\n*  napi_object,\n*  napi_function,\n*  napi_external,\n*  napi_bigint,\n*} napi_valuetype;\n*/</span>\nNAPI_EXTERN napi_status <span class="token function">napi_typeof</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value value<span class="token punctuation">,</span> napi_valuetype<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 从JS 数据提取C 兼容的数据，也是要预先声明返回值的</span>\nNAPI_EXTERN napi_status <span class="token function">napi_get_value_double</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value value<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_get_value_int32</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value value<span class="token punctuation">,</span> <span class="token class-name">int32_t</span><span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_get_value_uint32</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value value<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span><span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_get_value_int64</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value value<span class="token punctuation">,</span> <span class="token class-name">int64_t</span><span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_get_value_bool</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value value<span class="token punctuation">,</span> bool<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 字符串处理</span>\n<span class="token comment">// 拷贝???? 编码的字符串到缓冲区</span>\nNAPI_EXTERN napi_status <span class="token function">napi_get_value_string_latin1</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value value<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> bufsize<span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_get_value_string_utf8</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value value<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> bufsize<span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_get_value_string_utf16</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value value<span class="token punctuation">,</span> <span class="token class-name">char16_t</span><span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> bufsize<span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 强制类型转换？</span>\n<span class="token comment">// Methods to coerce values</span>\n<span class="token comment">// These APIs may execute user scripts</span>\nNAPI_EXTERN napi_status <span class="token function">napi_coerce_to_bool</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value value<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_coerce_to_number</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value value<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_coerce_to_object</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value value<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_coerce_to_string</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value value<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 操作对象的方法</span>\nNAPI_EXTERN napi_status <span class="token function">napi_get_prototype</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value object<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_get_property_names</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value object<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_set_property</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value object<span class="token punctuation">,</span> napi_value key<span class="token punctuation">,</span> napi_value value<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_has_property</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value object<span class="token punctuation">,</span> napi_value key<span class="token punctuation">,</span> bool<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_get_property</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value object<span class="token punctuation">,</span> napi_value key<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_delete_property</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value object<span class="token punctuation">,</span> napi_value key<span class="token punctuation">,</span> bool<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_has_own_property</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value object<span class="token punctuation">,</span> napi_value key<span class="token punctuation">,</span> bool<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_set_named_property</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value object<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> utf8name<span class="token punctuation">,</span> napi_value value<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_has_named_property</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value object<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> utf8name<span class="token punctuation">,</span> bool<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_get_named_property</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value object<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> utf8name<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_set_element</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value object<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">,</span> napi_value value<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_has_element</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value object<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">,</span> bool<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_get_element</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value object<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_delete_element</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value object<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">,</span> bool<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 定义对象属性</span>\n<span class="token function">napi_define_properties</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value object<span class="token punctuation">,</span> <span class="token class-name">size_t</span> property_count<span class="token punctuation">,</span> <span class="token keyword">const</span> napi_property_descriptor<span class="token operator">*</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 操作数组的方法</span>\nNAPI_EXTERN napi_status <span class="token function">napi_is_array</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value value<span class="token punctuation">,</span> bool<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_get_array_length</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value value<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span><span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 数据比较的方法</span>\nNAPI_EXTERN napi_status <span class="token function">napi_strict_equals</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value lhs<span class="token punctuation">,</span> napi_value rhs<span class="token punctuation">,</span> bool<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 操作函数的方法</span>\nNAPI_EXTERN napi_status <span class="token function">napi_call_function</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value recv<span class="token punctuation">,</span> napi_value func<span class="token punctuation">,</span> <span class="token class-name">size_t</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> napi_value<span class="token operator">*</span> argv<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_new_instance</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value constructor<span class="token punctuation">,</span> <span class="token class-name">size_t</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> napi_value<span class="token operator">*</span> argv<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_instanceof</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value object<span class="token punctuation">,</span> napi_value constructor<span class="token punctuation">,</span> bool<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\nNAPI_EXTERN napi_status <span class="token function">napi_get_new_target</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_callback_info cbinfo<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_define_class</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> utf8name<span class="token punctuation">,</span> <span class="token class-name">size_t</span> length<span class="token punctuation">,</span> napi_callback constructor<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> data<span class="token punctuation">,</span> <span class="token class-name">size_t</span> property_count<span class="token punctuation">,</span> <span class="token keyword">const</span> napi_property_descriptor<span class="token operator">*</span> properties<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 封装扩展数据类型</span>\nNAPI_EXTERN napi_status <span class="token function">napi_wrap</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value js_object<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> native_object<span class="token punctuation">,</span> napi_finalize finalize_cb<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> finalize_hint<span class="token punctuation">,</span> napi_ref<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_unwrap</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value js_object<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_remove_wrap</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value js_object<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_create_external</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> data<span class="token punctuation">,</span> napi_finalize finalize_cb<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> finalize_hint<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_get_value_external</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value value<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 控制对象生命周期</span>\n<span class="token comment">// 这里的操作要比较小心，目测会有内存泄漏的风险</span>\n\n<span class="token comment">// 设置一个对象的引用</span>\n<span class="token comment">// Set initial_refcount to 0 for a weak reference, &gt;0 for a strong reference.</span>\nNAPI_EXTERN napi_status <span class="token function">napi_create_reference</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value value<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> initial_refcount<span class="token punctuation">,</span> napi_ref<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 删除对象的引用</span>\n<span class="token comment">// Deletes a reference. The referenced value is released, and may</span>\n<span class="token comment">// be GC&#39;d unless there are other references to it.</span>\nNAPI_EXTERN napi_status <span class="token function">napi_delete_reference</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_ref ref<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Increments the reference count, optionally returning the resulting count.</span>\n<span class="token comment">// After this call the  reference will be a strong reference because its</span>\n<span class="token comment">// refcount is &gt;0, and the referenced object is effectively &quot;pinned&quot;.</span>\n<span class="token comment">// Calling this when the refcount is 0 and the object is unavailable</span>\n<span class="token comment">// results in an error.</span>\nNAPI_EXTERN napi_status <span class="token function">napi_reference_ref</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_ref ref<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span><span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Decrements the reference count, optionally returning the resulting count.</span>\n<span class="token comment">// If the result is 0 the reference is now weak and the object may be GC&#39;d</span>\n<span class="token comment">// at any time if there are no other references. Calling this when the</span>\n<span class="token comment">// refcount is already 0 results in an error.</span>\nNAPI_EXTERN napi_status <span class="token function">napi_reference_unref</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_ref ref<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span><span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Attempts to get a referenced value. If the reference is weak,</span>\n<span class="token comment">// the value might no longer be available, in that case the call</span>\n<span class="token comment">// is still successful but the result is NULL.</span>\nNAPI_EXTERN napi_status <span class="token function">napi_get_reference_value</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_ref ref<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_open_handle_scope</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_handle_scope<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_close_handle_scope</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_handle_scope scope<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_open_escapable_handle_scope</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_escapable_handle_scope<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_close_escapable_handle_scope</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_escapable_handle_scope scope<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_escape_handle</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_escapable_handle_scope scope<span class="token punctuation">,</span> napi_value escapee<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 异常处理</span>\nNAPI_EXTERN napi_status <span class="token function">napi_throw</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value error<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_throw_error</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> code<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_throw_type_error</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> code<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_throw_range_error</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> code<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_is_error</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value value<span class="token punctuation">,</span> bool<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 异常捕获</span>\nNAPI_EXTERN napi_status <span class="token function">napi_is_exception_pending</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> bool<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_get_and_clear_last_exception</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 数组Buffer 和确定类型的数组</span>\nNAPI_EXTERN napi_status <span class="token function">napi_is_arraybuffer</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value value<span class="token punctuation">,</span> bool<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_create_arraybuffer</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> <span class="token class-name">size_t</span> byte_length<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">*</span> data<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_create_external_arraybuffer</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> external_data<span class="token punctuation">,</span> <span class="token class-name">size_t</span> byte_length<span class="token punctuation">,</span> napi_finalize finalize_cb<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> finalize_hint<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_get_arraybuffer_info</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value arraybuffer<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">*</span> data<span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token operator">*</span> byte_length<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_is_typedarray</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value value<span class="token punctuation">,</span> bool<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_create_typedarray</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_typedarray_type type<span class="token punctuation">,</span> <span class="token class-name">size_t</span> length<span class="token punctuation">,</span> napi_value arraybuffer<span class="token punctuation">,</span> <span class="token class-name">size_t</span> byte_offset<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_get_typedarray_info</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value typedarray<span class="token punctuation">,</span> napi_typedarray_type<span class="token operator">*</span> type<span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token operator">*</span> length<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">*</span> data<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> arraybuffer<span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token operator">*</span> byte_offset<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nNAPI_EXTERN napi_status <span class="token function">napi_create_dataview</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> <span class="token class-name">size_t</span> length<span class="token punctuation">,</span> napi_value arraybuffer<span class="token punctuation">,</span> <span class="token class-name">size_t</span> byte_offset<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_is_dataview</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value value<span class="token punctuation">,</span> bool<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_get_dataview_info</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value dataview<span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token operator">*</span> bytelength<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">*</span> data<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> arraybuffer<span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token operator">*</span> byte_offset<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Node 版本管理</span>\nNAPI_EXTERN napi_status <span class="token function">napi_get_version</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span><span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Promises，异步</span>\nNAPI_EXTERN napi_status <span class="token function">napi_create_promise</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_deferred<span class="token operator">*</span> deferred<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> promise<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_resolve_deferred</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_deferred deferred<span class="token punctuation">,</span> napi_value resolution<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_reject_deferred</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_deferred deferred<span class="token punctuation">,</span> napi_value rejection<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_is_promise</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value value<span class="token punctuation">,</span> bool<span class="token operator">*</span> is_promise<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Running a script，执行脚本，猜测是evl</span>\nNAPI_EXTERN napi_status <span class="token function">napi_run_script</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value script<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 内存管理</span>\nNAPI_EXTERN napi_status <span class="token function">napi_adjust_external_memory</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> <span class="token class-name">int64_t</span> change_in_bytes<span class="token punctuation">,</span> <span class="token class-name">int64_t</span><span class="token operator">*</span> adjusted_value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n<span class="token comment">// Dates</span>\nNAPI_EXTERN napi_status <span class="token function">napi_create_date</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> <span class="token keyword">double</span> time<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_is_date</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value value<span class="token punctuation">,</span> bool<span class="token operator">*</span> is_date<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_get_date_value</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value value<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Add finalizer for pointer</span>\nNAPI_EXTERN napi_status <span class="token function">napi_add_finalizer</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value js_object<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> native_object<span class="token punctuation">,</span> napi_finalize finalize_cb<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> finalize_hint<span class="token punctuation">,</span> napi_ref<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// BigInt </span>\nNAPI_EXTERN napi_status <span class="token function">napi_create_bigint_int64</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> <span class="token class-name">int64_t</span> value<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_create_bigint_uint64</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> <span class="token class-name">uint64_t</span> value<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_create_bigint_words</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> <span class="token keyword">int</span> sign_bit<span class="token punctuation">,</span> <span class="token class-name">size_t</span> word_count<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">uint64_t</span><span class="token operator">*</span> words<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_get_value_bigint_int64</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value value<span class="token punctuation">,</span> <span class="token class-name">int64_t</span><span class="token operator">*</span> result<span class="token punctuation">,</span> bool<span class="token operator">*</span> lossless<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_get_value_bigint_uint64</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value value<span class="token punctuation">,</span> <span class="token class-name">uint64_t</span><span class="token operator">*</span> result<span class="token punctuation">,</span> bool<span class="token operator">*</span> lossless<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_get_value_bigint_words</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value value<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> sign_bit<span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token operator">*</span> word_count<span class="token punctuation">,</span> <span class="token class-name">uint64_t</span><span class="token operator">*</span> words<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Object </span>\n<span class="token function">napi_get_all_property_names</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value object<span class="token punctuation">,</span> napi_key_collection_mode key_mode<span class="token punctuation">,</span> napi_key_filter key_filter<span class="token punctuation">,</span> napi_key_conversion key_conversion<span class="token punctuation">,</span> napi_value<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Instance data</span>\nNAPI_EXTERN napi_status <span class="token function">napi_set_instance_data</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> data<span class="token punctuation">,</span> napi_finalize finalize_cb<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> finalize_hint<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_get_instance_data</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">*</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// ArrayBuffer detaching</span>\nNAPI_EXTERN napi_status <span class="token function">napi_detach_arraybuffer</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value arraybuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_is_detached_arraybuffer</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value value<span class="token punctuation">,</span> bool<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>  \n<span class="token comment">// Type tagging，类型标签</span>\nNAPI_EXTERN napi_status <span class="token function">napi_type_tag_object</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value value<span class="token punctuation">,</span> <span class="token keyword">const</span> napi_type_tag<span class="token operator">*</span> type_tag<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">napi_check_object_type_tag</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value value<span class="token punctuation">,</span> <span class="token keyword">const</span> napi_type_tag<span class="token operator">*</span> type_tag<span class="token punctuation">,</span> bool<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_object_freeze</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value object<span class="token punctuation">)</span><span class="token punctuation">;</span>\nNAPI_EXTERN napi_status <span class="token function">napi_object_seal</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value object<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br><span class="line-number">163</span><br><span class="line-number">164</span><br><span class="line-number">165</span><br><span class="line-number">166</span><br><span class="line-number">167</span><br><span class="line-number">168</span><br><span class="line-number">169</span><br><span class="line-number">170</span><br><span class="line-number">171</span><br><span class="line-number">172</span><br><span class="line-number">173</span><br><span class="line-number">174</span><br><span class="line-number">175</span><br><span class="line-number">176</span><br><span class="line-number">177</span><br><span class="line-number">178</span><br><span class="line-number">179</span><br><span class="line-number">180</span><br><span class="line-number">181</span><br><span class="line-number">182</span><br><span class="line-number">183</span><br><span class="line-number">184</span><br><span class="line-number">185</span><br><span class="line-number">186</span><br><span class="line-number">187</span><br><span class="line-number">188</span><br><span class="line-number">189</span><br><span class="line-number">190</span><br><span class="line-number">191</span><br><span class="line-number">192</span><br><span class="line-number">193</span><br><span class="line-number">194</span><br><span class="line-number">195</span><br><span class="line-number">196</span><br><span class="line-number">197</span><br><span class="line-number">198</span><br><span class="line-number">199</span><br><span class="line-number">200</span><br><span class="line-number">201</span><br><span class="line-number">202</span><br><span class="line-number">203</span><br><span class="line-number">204</span><br><span class="line-number">205</span><br><span class="line-number">206</span><br><span class="line-number">207</span><br><span class="line-number">208</span><br><span class="line-number">209</span><br><span class="line-number">210</span><br><span class="line-number">211</span><br><span class="line-number">212</span><br><span class="line-number">213</span><br><span class="line-number">214</span><br><span class="line-number">215</span><br><span class="line-number">216</span><br></div></div></details><h2 id="具体细节"><a class="header-anchor" href="#具体细节">#</a> 具体细节</h2><h3 id="获取函数的参数"><a class="header-anchor" href="#获取函数的参数">#</a> 获取函数的参数</h3><p>传入函数的参数被存放在<code>napi_callback_info</code> 中，可以通过<code>napi_get_cb_info</code> 函数来提取。需要注意的是，在自定义插件中定义的函数，参数数量一般来说最好与<code>JS</code> 约定好。</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/**\n* // 一次调用获取所有回调函数的信息。(Ugly, but faster.)\n* NAPI_EXTERN napi_status napi_get_cb_info(\n*     napi_env env,               // [in] 运行环境\n*     napi_callback_info cbinfo,  // [in] 回调函数的参数\n*     size_t* argc,      // [in-out] 预设置取参数的数量\n*                        // 返回实际取到的参数数量\n*     napi_value* argv,  // [out] 参数数组\n*     napi_value* this_arg,  // [out] 获取函数调用时this 对象\n*     void** data);          // [out] 获取该函数的数据指针（不太懂\n*/</span>\n<span class="token keyword">static</span> napi_value <span class="token function">Add</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_callback_info info<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  napi_status status<span class="token punctuation">;</span>\n\n  <span class="token comment">// 1. 从napi_callback_info 提取参数及其数量</span>\n  <span class="token class-name">size_t</span> argc <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n  napi_value args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  status <span class="token operator">=</span> <span class="token function">napi_get_cb_info</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> info<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">assert</span><span class="token punctuation">(</span>status <span class="token operator">==</span> napi_ok<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 抛出异常</span>\n    <span class="token function">napi_throw_type_error</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot;Wrong number of arguments&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 2. 获取参数类型</span>\n  napi_valuetype valuetype0<span class="token punctuation">;</span>\n  status <span class="token operator">=</span> <span class="token function">napi_typeof</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>valuetype0<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">assert</span><span class="token punctuation">(</span>status <span class="token operator">==</span> napi_ok<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  napi_valuetype valuetype1<span class="token punctuation">;</span>\n  status <span class="token operator">=</span> <span class="token function">napi_typeof</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>valuetype1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">assert</span><span class="token punctuation">(</span>status <span class="token operator">==</span> napi_ok<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 3. 判断参数类型</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>valuetype0 <span class="token operator">!=</span> napi_number <span class="token operator">||</span> valuetype1 <span class="token operator">!=</span> napi_number<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">napi_throw_type_error</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot;Wrong arguments&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 4. 获取数据值</span>\n  <span class="token keyword">double</span> value0<span class="token punctuation">;</span>\n  status <span class="token operator">=</span> <span class="token function">napi_get_value_double</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>value0<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">assert</span><span class="token punctuation">(</span>status <span class="token operator">==</span> napi_ok<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">double</span> value1<span class="token punctuation">;</span>\n  status <span class="token operator">=</span> <span class="token function">napi_get_value_double</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>value1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">assert</span><span class="token punctuation">(</span>status <span class="token operator">==</span> napi_ok<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  napi_value sum<span class="token punctuation">;</span>\n  status <span class="token operator">=</span> <span class="token function">napi_create_double</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> value0 <span class="token operator">+</span> value1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">assert</span><span class="token punctuation">(</span>status <span class="token operator">==</span> napi_ok<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> sum<span class="token punctuation">;</span>\n  <span class="token comment">// 从上面的代码来看，获取函数参数的部分存在着大量的重复代码（对开发者而言），</span>\n  <span class="token comment">// 当然这些代码在程序执行时都是必须的，但是考虑到开发效率，我们依然需要能提取</span>\n  <span class="token comment">// 代码的冗余部分，进行封装。</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br></div></div><h3 id="调用-回调-函数"><a class="header-anchor" href="#调用-回调-函数">#</a> 调用（回调）函数</h3><p>主要用来调用传入的JS 回调函数。</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/**\n* NAPI_EXTERN napi_status napi_call_function(napi_env env,\n*                                           napi_value recv,        // this 对象\n*                             // 非实例函数可以用napi_get_global() 获取global 对象\n*                                           napi_value func,           // 函数体\n*                                           size_t argc,             // 参数数量 \n*                                           const napi_value* argv,  // 传入参数\n*                                           napi_value* result);       // 返回值\n*/</span>\n<span class="token keyword">static</span> napi_value <span class="token function">RunCallback</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> <span class="token keyword">const</span> napi_callback_info info<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  napi_status status<span class="token punctuation">;</span>\n\n  <span class="token class-name">size_t</span> argc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  napi_value args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  status <span class="token operator">=</span> <span class="token function">napi_get_cb_info</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> info<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">assert</span><span class="token punctuation">(</span>status <span class="token operator">==</span> napi_ok<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  napi_value cb <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n  napi_value argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  status <span class="token operator">=</span> <span class="token function">napi_create_string_utf8</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">,</span> NAPI_AUTO_LENGTH<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">assert</span><span class="token punctuation">(</span>status <span class="token operator">==</span> napi_ok<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  napi_value global<span class="token punctuation">;</span>\n  status <span class="token operator">=</span> <span class="token function">napi_get_global</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token operator">&amp;</span>global<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">assert</span><span class="token punctuation">(</span>status <span class="token operator">==</span> napi_ok<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  napi_value result<span class="token punctuation">;</span>\n  status <span class="token operator">=</span> <span class="token function">napi_call_function</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> global<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token operator">&amp;</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">assert</span><span class="token punctuation">(</span>status <span class="token operator">==</span> napi_ok<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">static</span> napi_value <span class="token function">Init</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value exports<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  napi_value new_exports<span class="token punctuation">;</span>\n  napi_status status <span class="token operator">=</span> <span class="token function">napi_create_function</span><span class="token punctuation">(</span>\n      env<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> NAPI_AUTO_LENGTH<span class="token punctuation">,</span> RunCallback<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>new_exports<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">assert</span><span class="token punctuation">(</span>status <span class="token operator">==</span> napi_ok<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 其实导出的对象也是一个普通的napi_value</span>\n  <span class="token keyword">return</span> new_exports<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">/**\n* 创建函数\n* napi_status napi_create_function(napi_env env,          //\n*                                  const char* utf8name,  // 函数名，留空表示匿名函数？\n*                                  size_t length,         // 函数名长度，或者NAPI_AUTO_LENGTH \n*                                  napi_callback cb,      // 函数体\n*                                  void* data,            // 用户提供的数据上下文，调用时传递回函数。 \n*                                  napi_value* result);   // 返回值：返回一个函数类型\n*/</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div><h3 id="对象工厂"><a class="header-anchor" href="#对象工厂">#</a> 对象工厂</h3><p>创建JS 对象的方法。</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/**\n* NAPI_EXTERN napi_status napi_set_named_property(napi_env env,  //\n*                                          napi_value object,    // \n*                                          const char* utf8name, // 属性名\n*                                          napi_value value);    // 属性值\n*/</span>\n\n<span class="token keyword">static</span> napi_value <span class="token function">CreateObject</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> <span class="token keyword">const</span> napi_callback_info info<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  napi_status status<span class="token punctuation">;</span>\n\n  <span class="token class-name">size_t</span> argc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  napi_value args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  status <span class="token operator">=</span> <span class="token function">napi_get_cb_info</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> info<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">assert</span><span class="token punctuation">(</span>status <span class="token operator">==</span> napi_ok<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  napi_value obj<span class="token punctuation">;</span>\n  status <span class="token operator">=</span> <span class="token function">napi_create_object</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token operator">&amp;</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">assert</span><span class="token punctuation">(</span>status <span class="token operator">==</span> napi_ok<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  status <span class="token operator">=</span> <span class="token function">napi_set_named_property</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> <span class="token string">&quot;msg&quot;</span><span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">assert</span><span class="token punctuation">(</span>status <span class="token operator">==</span> napi_ok<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> obj<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 导出为匿名函数</span>\n<span class="token keyword">static</span> napi_value <span class="token function">Init</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value exports<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  napi_value new_exports<span class="token punctuation">;</span>\n  napi_status status <span class="token operator">=</span> <span class="token function">napi_create_function</span><span class="token punctuation">(</span>\n      env<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> NAPI_AUTO_LENGTH<span class="token punctuation">,</span> CreateObject<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>new_exports<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">assert</span><span class="token punctuation">(</span>status <span class="token operator">==</span> napi_ok<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> new_exports<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">NAPI_MODULE</span><span class="token punctuation">(</span>NODE_GYP_MODULE_NAME<span class="token punctuation">,</span> Init<span class="token punctuation">)</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h3 id="函数工厂"><a class="header-anchor" href="#函数工厂">#</a> 函数工厂</h3><p>函数工厂就是构建JS 函数的方法，前文已经提到过了。</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// 返回&quot;hello world&quot;</span>\n<span class="token keyword">static</span> napi_value <span class="token function">MyFunction</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_callback_info info<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  napi_status status<span class="token punctuation">;</span>\n\n  napi_value str<span class="token punctuation">;</span>\n  status <span class="token operator">=</span> <span class="token function">napi_create_string_utf8</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">,</span> NAPI_AUTO_LENGTH<span class="token punctuation">,</span> <span class="token operator">&amp;</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">assert</span><span class="token punctuation">(</span>status <span class="token operator">==</span> napi_ok<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> str<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">static</span> napi_value <span class="token function">CreateFunction</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_callback_info info<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  napi_status status<span class="token punctuation">;</span>\n\n  napi_value fn<span class="token punctuation">;</span>\n  status <span class="token operator">=</span> <span class="token function">napi_create_function</span><span class="token punctuation">(</span>\n      env<span class="token punctuation">,</span> <span class="token string">&quot;theFunction&quot;</span><span class="token punctuation">,</span> NAPI_AUTO_LENGTH<span class="token punctuation">,</span> MyFunction<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">assert</span><span class="token punctuation">(</span>status <span class="token operator">==</span> napi_ok<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> fn<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="晋级c"><a class="header-anchor" href="#晋级c">#</a> 晋级C++</h2><p>前面我们基本上已经了解了<code>C</code> 语言插件的开发，特点就是代码很长。于是我们可以采用面向对象的方式来封装代码。于是，以后将开始引入<code>C++</code>，将JS 对象与CPP 对象一一对应起来。然鹅对于不熟悉<code>C++</code> 的我来说，看代码果然还是太难了些。</p><h3 id="对象的封装"><a class="header-anchor" href="#对象的封装">#</a> 对象的封装</h3><p>封装一个自定义的<code>C++</code> 对象类型，并将函数、属性、初始化的方法，统统写到对象内部。这样就可以只对外保留导出模块的接口了。似乎每一个模块都会有一个实例<code>instance</code>。**而<code>Constructor,New</code> 则应该是约定好的，会被JS 调用的函数名。**看一遍源码只能说能了解个大概，真要是用还需要大量的练习。</p>',20),v=p("div",{class:"language-c ext-c line-numbers-mode"},[p("pre",{class:"language-c"},[p("code",null,[p("span",{class:"token macro property"},[p("span",{class:"token directive-hash"},"#"),p("span",{class:"token directive keyword"},"include"),c(),p("span",{class:"token string"},'"myobject.h"')]),c("\n\nnapi_value "),p("span",{class:"token function"},"Init"),p("span",{class:"token punctuation"},"("),c("napi_env env"),p("span",{class:"token punctuation"},","),c(" napi_value exports"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token punctuation"},"{"),c("\n  "),p("span",{class:"token keyword"},"return"),c(" MyObject"),p("span",{class:"token operator"},"::"),p("span",{class:"token function"},"Init"),p("span",{class:"token punctuation"},"("),c("env"),p("span",{class:"token punctuation"},","),c(" exports"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n"),p("span",{class:"token punctuation"},"}"),c("\n\n"),p("span",{class:"token function"},"NAPI_MODULE"),p("span",{class:"token punctuation"},"("),c("NODE_GYP_MODULE_NAME"),p("span",{class:"token punctuation"},","),c(" Init"),p("span",{class:"token punctuation"},")"),c("\n")])]),p("div",{class:"highlight-lines"},[p("br"),p("br"),p("br"),p("div",{class:"highlight-line"}," "),p("br"),p("br"),p("br")]),p("div",{class:"line-numbers"},[p("span",{class:"line-number"},"1"),p("br"),p("span",{class:"line-number"},"2"),p("br"),p("span",{class:"line-number"},"3"),p("br"),p("span",{class:"line-number"},"4"),p("br"),p("span",{class:"line-number"},"5"),p("br"),p("span",{class:"line-number"},"6"),p("br"),p("span",{class:"line-number"},"7"),p("br")])],-1),d=p("div",{class:"language-c ext-c line-numbers-mode"},[p("pre",{class:"language-c"},[p("code",null,[p("span",{class:"token macro property"},[p("span",{class:"token directive-hash"},"#"),p("span",{class:"token directive keyword"},"ifndef"),c(),p("span",{class:"token expression"},"TEST_ADDONS_NAPI_6_OBJECT_WRAP_MYOBJECT_H_")]),c("\n"),p("span",{class:"token macro property"},[p("span",{class:"token directive-hash"},"#"),p("span",{class:"token directive keyword"},"define"),c(),p("span",{class:"token macro-name"},"TEST_ADDONS_NAPI_6_OBJECT_WRAP_MYOBJECT_H_")]),c("\n\n"),p("span",{class:"token macro property"},[p("span",{class:"token directive-hash"},"#"),p("span",{class:"token directive keyword"},"include"),c(),p("span",{class:"token string"},"<node_api.h>")]),c("\n\nclass MyObject "),p("span",{class:"token punctuation"},"{"),c("\n public"),p("span",{class:"token operator"},":"),c("\n  "),p("span",{class:"token keyword"},"static"),c(" napi_value "),p("span",{class:"token function"},"Init"),p("span",{class:"token punctuation"},"("),c("napi_env env"),p("span",{class:"token punctuation"},","),c(" napi_value exports"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n  "),p("span",{class:"token keyword"},"static"),c(),p("span",{class:"token keyword"},"void"),c(),p("span",{class:"token function"},"Destructor"),p("span",{class:"token punctuation"},"("),c("napi_env env"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token keyword"},"void"),p("span",{class:"token operator"},"*"),c(" nativeObject"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token keyword"},"void"),p("span",{class:"token operator"},"*"),c(" finalize_hint"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n\n private"),p("span",{class:"token operator"},":"),c("\n  "),p("span",{class:"token comment"},"// explicit 拒绝构造函数的隐式调用，总之能用就用"),c("\n  explicit "),p("span",{class:"token function"},"MyObject"),p("span",{class:"token punctuation"},"("),p("span",{class:"token keyword"},"double"),c(" value_ "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n  "),p("span",{class:"token operator"},"~"),p("span",{class:"token function"},"MyObject"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n\n  "),p("span",{class:"token keyword"},"static"),c(" napi_value "),p("span",{class:"token function"},"New"),p("span",{class:"token punctuation"},"("),c("napi_env env"),p("span",{class:"token punctuation"},","),c(" napi_callback_info info"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n  "),p("span",{class:"token keyword"},"static"),c(" napi_value "),p("span",{class:"token function"},"GetValue"),p("span",{class:"token punctuation"},"("),c("napi_env env"),p("span",{class:"token punctuation"},","),c(" napi_callback_info info"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n  "),p("span",{class:"token keyword"},"static"),c(" napi_value "),p("span",{class:"token function"},"SetValue"),p("span",{class:"token punctuation"},"("),c("napi_env env"),p("span",{class:"token punctuation"},","),c(" napi_callback_info info"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n  "),p("span",{class:"token keyword"},"static"),c(" napi_value "),p("span",{class:"token function"},"PlusOne"),p("span",{class:"token punctuation"},"("),c("napi_env env"),p("span",{class:"token punctuation"},","),c(" napi_callback_info info"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n  "),p("span",{class:"token keyword"},"static"),c(" napi_value "),p("span",{class:"token function"},"Multiply"),p("span",{class:"token punctuation"},"("),c("napi_env env"),p("span",{class:"token punctuation"},","),c(" napi_callback_info info"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n  "),p("span",{class:"token keyword"},"static"),c(),p("span",{class:"token keyword"},"inline"),c(" napi_value "),p("span",{class:"token function"},"Constructor"),p("span",{class:"token punctuation"},"("),c("napi_env env"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n\n  "),p("span",{class:"token keyword"},"double"),c(" value_"),p("span",{class:"token punctuation"},";"),c("\n  napi_env env_"),p("span",{class:"token punctuation"},";"),c("\n  napi_ref wrapper_"),p("span",{class:"token punctuation"},";"),c("\n"),p("span",{class:"token punctuation"},"}"),p("span",{class:"token punctuation"},";"),c("\n\n"),p("span",{class:"token macro property"},[p("span",{class:"token directive-hash"},"#"),p("span",{class:"token directive keyword"},"endif"),c("  "),p("span",{class:"token comment"},"// TEST_ADDONS_NAPI_6_OBJECT_WRAP_MYOBJECT_H_")]),c("\n")])]),p("div",{class:"line-numbers"},[p("span",{class:"line-number"},"1"),p("br"),p("span",{class:"line-number"},"2"),p("br"),p("span",{class:"line-number"},"3"),p("br"),p("span",{class:"line-number"},"4"),p("br"),p("span",{class:"line-number"},"5"),p("br"),p("span",{class:"line-number"},"6"),p("br"),p("span",{class:"line-number"},"7"),p("br"),p("span",{class:"line-number"},"8"),p("br"),p("span",{class:"line-number"},"9"),p("br"),p("span",{class:"line-number"},"10"),p("br"),p("span",{class:"line-number"},"11"),p("br"),p("span",{class:"line-number"},"12"),p("br"),p("span",{class:"line-number"},"13"),p("br"),p("span",{class:"line-number"},"14"),p("br"),p("span",{class:"line-number"},"15"),p("br"),p("span",{class:"line-number"},"16"),p("br"),p("span",{class:"line-number"},"17"),p("br"),p("span",{class:"line-number"},"18"),p("br"),p("span",{class:"line-number"},"19"),p("br"),p("span",{class:"line-number"},"20"),p("br"),p("span",{class:"line-number"},"21"),p("br"),p("span",{class:"line-number"},"22"),p("br"),p("span",{class:"line-number"},"23"),p("br"),p("span",{class:"line-number"},"24"),p("br"),p("span",{class:"line-number"},"25"),p("br"),p("span",{class:"line-number"},"26"),p("br"),p("span",{class:"line-number"},"27"),p("br"),p("span",{class:"line-number"},"28"),p("br")])],-1),f=p("div",{class:"language-c ext-c line-numbers-mode"},[p("pre",{class:"language-c"},[p("code",null,[p("span",{class:"token macro property"},[p("span",{class:"token directive-hash"},"#"),p("span",{class:"token directive keyword"},"include"),c(),p("span",{class:"token string"},'"myobject.h"')]),c("\n"),p("span",{class:"token macro property"},[p("span",{class:"token directive-hash"},"#"),p("span",{class:"token directive keyword"},"include"),c(),p("span",{class:"token string"},"<assert.h>")]),c("\n\n"),p("span",{class:"token comment"},"// 多继承，对象派生自：value_(value), env_(nullptr), wrapper_(nullptr)"),c("\n"),p("span",{class:"token comment"},"// 需要注意的是，对象本身的值存放于value_(value)"),c("\nMyObject"),p("span",{class:"token operator"},"::"),p("span",{class:"token function"},"MyObject"),p("span",{class:"token punctuation"},"("),p("span",{class:"token keyword"},"double"),c(" value"),p("span",{class:"token punctuation"},")"),c("\n    "),p("span",{class:"token operator"},":"),c(),p("span",{class:"token function"},"value_"),p("span",{class:"token punctuation"},"("),c("value"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token function"},"env_"),p("span",{class:"token punctuation"},"("),c("nullptr"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token function"},"wrapper_"),p("span",{class:"token punctuation"},"("),c("nullptr"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token punctuation"},"{"),p("span",{class:"token punctuation"},"}"),c("  \n\nMyObject"),p("span",{class:"token operator"},"::"),p("span",{class:"token operator"},"~"),p("span",{class:"token function"},"MyObject"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token punctuation"},"{"),c("\n  "),p("span",{class:"token comment"},"// 删除JS 引用"),c("\n  "),p("span",{class:"token function"},"napi_delete_reference"),p("span",{class:"token punctuation"},"("),c("env_"),p("span",{class:"token punctuation"},","),c(" wrapper_"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n"),p("span",{class:"token punctuation"},"}"),c("\n\n"),p("span",{class:"token keyword"},"void"),c(" MyObject"),p("span",{class:"token operator"},"::"),p("span",{class:"token function"},"Destructor"),p("span",{class:"token punctuation"},"("),c("napi_env env"),p("span",{class:"token punctuation"},","),c("\n                          "),p("span",{class:"token keyword"},"void"),p("span",{class:"token operator"},"*"),c(" nativeObject"),p("span",{class:"token punctuation"},","),c("\n                          "),p("span",{class:"token keyword"},"void"),p("span",{class:"token operator"},"*"),c(),p("span",{class:"token comment"},"/*finalize_hint*/"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token punctuation"},"{"),c("\n  \n  "),p("span",{class:"token comment"},"// reinterpret_cast 运算符并不会改变括号中运算对象的值，而是对该对象从位模式上进行重新解释"),c("\n  reinterpret_cast"),p("span",{class:"token operator"},"<"),c("MyObject"),p("span",{class:"token operator"},"*"),p("span",{class:"token operator"},">"),p("span",{class:"token punctuation"},"("),c("nativeObject"),p("span",{class:"token punctuation"},")"),p("span",{class:"token operator"},"->"),p("span",{class:"token operator"},"~"),p("span",{class:"token function"},"MyObject"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n  "),p("span",{class:"token comment"},"// 调用析构函数"),c("\n"),p("span",{class:"token punctuation"},"}"),c("\n\n"),p("span",{class:"token comment"},"// 定义属性描述符"),c("\n"),p("span",{class:"token macro property"},[p("span",{class:"token directive-hash"},"#"),p("span",{class:"token directive keyword"},"define"),c(),p("span",{class:"token macro-name function"},"DECLARE_NAPI_METHOD"),p("span",{class:"token expression"},[p("span",{class:"token punctuation"},"("),c("name"),p("span",{class:"token punctuation"},","),c(" func"),p("span",{class:"token punctuation"},")"),c("                                        ")]),p("span",{class:"token punctuation"},"\\"),c("\n  "),p("span",{class:"token expression"},[p("span",{class:"token punctuation"},"{"),c(" name"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},","),c(" func"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},","),c(" napi_default"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token number"},"0"),c(),p("span",{class:"token punctuation"},"}")])]),c("\n\n"),p("span",{class:"token comment"},"// 用于初始化模块，并返回构造好的.node 模块"),c("\nnapi_value MyObject"),p("span",{class:"token operator"},"::"),p("span",{class:"token function"},"Init"),p("span",{class:"token punctuation"},"("),c("napi_env env"),p("span",{class:"token punctuation"},","),c(" napi_value exports"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token punctuation"},"{"),c("\n  napi_status status"),p("span",{class:"token punctuation"},";"),c("\n  "),p("span",{class:"token comment"},"// 创建属性描述符"),c("\n  napi_property_descriptor properties"),p("span",{class:"token punctuation"},"["),p("span",{class:"token punctuation"},"]"),c(),p("span",{class:"token operator"},"="),c(),p("span",{class:"token punctuation"},"{"),c("\n      "),p("span",{class:"token comment"},"// 添加property->value，同时也包含getter,setter"),c("\n      "),p("span",{class:"token punctuation"},"{"),p("span",{class:"token string"},'"value"'),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},","),c(" GetValue"),p("span",{class:"token punctuation"},","),c(" SetValue"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},","),c(" napi_default"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},"}"),p("span",{class:"token punctuation"},","),c("\n      "),p("span",{class:"token comment"},"// 对象包含两个方法"),c("\n      "),p("span",{class:"token function"},"DECLARE_NAPI_METHOD"),p("span",{class:"token punctuation"},"("),p("span",{class:"token string"},'"plusOne"'),p("span",{class:"token punctuation"},","),c(" PlusOne"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},","),c("\n      "),p("span",{class:"token function"},"DECLARE_NAPI_METHOD"),p("span",{class:"token punctuation"},"("),p("span",{class:"token string"},'"multiply"'),p("span",{class:"token punctuation"},","),c(" Multiply"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},","),c("\n  "),p("span",{class:"token punctuation"},"}"),p("span",{class:"token punctuation"},";"),c("\n\n  "),p("span",{class:"token comment"},"/**\n  * 定义JS 类\n  * napi_status napi_define_class(napi_env env,\n  *                             const char* utf8name,      // 类名\n  *                             size_t length,             // 类名长度\n  *                             napi_callback constructor, // 构造函数\n  *                             void* data,                // 传入构造函数的data（可选）\n  *                             size_t property_count,     // 类属性长度\n  *                             const napi_property_descriptor* properties,\n  *                                                        // 类属性数组\n  *                             napi_value* result);       // 返回类对象\n  */"),c("\n  napi_value cons"),p("span",{class:"token punctuation"},";"),c("\n  status "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"napi_define_class"),p("span",{class:"token punctuation"},"("),c("\n      env"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token string"},'"MyObject"'),p("span",{class:"token punctuation"},","),c(" NAPI_AUTO_LENGTH"),p("span",{class:"token punctuation"},","),c(" New"),p("span",{class:"token punctuation"},","),c(" nullptr"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token number"},"3"),p("span",{class:"token punctuation"},","),c(" properties"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token operator"},"&"),c("cons"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n  "),p("span",{class:"token function"},"assert"),p("span",{class:"token punctuation"},"("),c("status "),p("span",{class:"token operator"},"=="),c(" napi_ok"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n\n  "),p("span",{class:"token comment"},"// 因为插件的Init 之后，我们还需要调用此构造函数，所以"),c("\n  "),p("span",{class:"token comment"},"// 我们需要创建一个强引用，将其持久化存储。这样我们就能"),c("\n  "),p("span",{class:"token comment"},"// 在插件中任何位置，通过`napi_get_instance_data` 检"),c("\n  "),p("span",{class:"token comment"},"// 索到它。我们不能将其设置为全局的静态变量，因为这样的"),c("\n  "),p("span",{class:"token comment"},"// 话无法支持worker 线程以及单线程的多个上下文。"),c("\n  napi_ref"),p("span",{class:"token operator"},"*"),c(" constructor "),p("span",{class:"token operator"},"="),c(" new napi_ref"),p("span",{class:"token punctuation"},";"),c("\n  status "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"napi_create_reference"),p("span",{class:"token punctuation"},"("),c("env"),p("span",{class:"token punctuation"},","),c(" cons"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},","),c(" constructor"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("  "),p("span",{class:"token comment"},"// 创建强引用"),c("\n  "),p("span",{class:"token function"},"assert"),p("span",{class:"token punctuation"},"("),c("status "),p("span",{class:"token operator"},"=="),c(" napi_ok"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n  status "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"napi_set_instance_data"),p("span",{class:"token punctuation"},"("),c("  "),p("span",{class:"token comment"},"// 添加到实例"),c("\n      env"),p("span",{class:"token punctuation"},","),c("          "),p("span",{class:"token comment"},"// "),c("\n      constructor"),p("span",{class:"token punctuation"},","),c("  "),p("span",{class:"token comment"},"// void* data。存入的数据"),c("\n      "),p("span",{class:"token comment"},"// 卸载插件时会调用此lambda 函数，来释放强引用与堆内存"),c("\n      "),p("span",{class:"token punctuation"},"["),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},"("),c("napi_env env"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token keyword"},"void"),p("span",{class:"token operator"},"*"),c(" data"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token keyword"},"void"),p("span",{class:"token operator"},"*"),c(" hint"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token punctuation"},"{"),c("\n        napi_ref"),p("span",{class:"token operator"},"*"),c(" constructor "),p("span",{class:"token operator"},"="),c(" static_cast"),p("span",{class:"token operator"},"<"),c("napi_ref"),p("span",{class:"token operator"},"*"),p("span",{class:"token operator"},">"),p("span",{class:"token punctuation"},"("),c("data"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n        napi_status status "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"napi_delete_reference"),p("span",{class:"token punctuation"},"("),c("env"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token operator"},"*"),c("constructor"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n        "),p("span",{class:"token function"},"assert"),p("span",{class:"token punctuation"},"("),c("status "),p("span",{class:"token operator"},"=="),c(" napi_ok"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n        delete constructor"),p("span",{class:"token punctuation"},";"),c("\n      "),p("span",{class:"token punctuation"},"}"),p("span",{class:"token punctuation"},","),c("            "),p("span",{class:"token comment"},"// napi_finalize finalize_cb。卸载插件时的回调函数"),c("\n      nullptr"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("     "),p("span",{class:"token comment"},"// 可选提示"),c("\n  "),p("span",{class:"token function"},"assert"),p("span",{class:"token punctuation"},"("),c("status "),p("span",{class:"token operator"},"=="),c(" napi_ok"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n\n  status "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"napi_set_named_property"),p("span",{class:"token punctuation"},"("),c("env"),p("span",{class:"token punctuation"},","),c(" exports"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token string"},'"MyObject"'),p("span",{class:"token punctuation"},","),c(" cons"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n  "),p("span",{class:"token function"},"assert"),p("span",{class:"token punctuation"},"("),c("status "),p("span",{class:"token operator"},"=="),c(" napi_ok"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n  "),p("span",{class:"token keyword"},"return"),c(" exports"),p("span",{class:"token punctuation"},";"),c("\n"),p("span",{class:"token punctuation"},"}"),c("\n\n"),p("span",{class:"token comment"},"// 对应JS 中的构造函数"),c("\nnapi_value MyObject"),p("span",{class:"token operator"},"::"),p("span",{class:"token function"},"Constructor"),p("span",{class:"token punctuation"},"("),c("napi_env env"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token punctuation"},"{"),c("\n  "),p("span",{class:"token comment"},"// 获取存放在示例中的构造函数的引用"),c("\n  "),p("span",{class:"token keyword"},"void"),p("span",{class:"token operator"},"*"),c(" instance_data "),p("span",{class:"token operator"},"="),c(" nullptr"),p("span",{class:"token punctuation"},";"),c("\n  napi_status status "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"napi_get_instance_data"),p("span",{class:"token punctuation"},"("),c("env"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token operator"},"&"),c("instance_data"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n  "),p("span",{class:"token function"},"assert"),p("span",{class:"token punctuation"},"("),c("status "),p("span",{class:"token operator"},"=="),c(" napi_ok"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n  napi_ref"),p("span",{class:"token operator"},"*"),c(" constructor "),p("span",{class:"token operator"},"="),c(" static_cast"),p("span",{class:"token operator"},"<"),c("napi_ref"),p("span",{class:"token operator"},"*"),p("span",{class:"token operator"},">"),p("span",{class:"token punctuation"},"("),c("instance_data"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n\n  napi_value cons"),p("span",{class:"token punctuation"},";"),c("\n  status "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"napi_get_reference_value"),p("span",{class:"token punctuation"},"("),c("env"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token operator"},"*"),c("constructor"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token operator"},"&"),c("cons"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n  "),p("span",{class:"token function"},"assert"),p("span",{class:"token punctuation"},"("),c("status "),p("span",{class:"token operator"},"=="),c(" napi_ok"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n  "),p("span",{class:"token keyword"},"return"),c(" cons"),p("span",{class:"token punctuation"},";"),c("\n"),p("span",{class:"token punctuation"},"}"),c("\n\nnapi_value MyObject"),p("span",{class:"token operator"},"::"),p("span",{class:"token function"},"New"),p("span",{class:"token punctuation"},"("),c("napi_env env"),p("span",{class:"token punctuation"},","),c(" napi_callback_info info"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token punctuation"},"{"),c("\n  napi_status status"),p("span",{class:"token punctuation"},";"),c("\n\n  napi_value target"),p("span",{class:"token punctuation"},";"),c("\n  status "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"napi_get_new_target"),p("span",{class:"token punctuation"},"("),c("env"),p("span",{class:"token punctuation"},","),c(" info"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token operator"},"&"),c("target"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("  \n  "),p("span",{class:"token function"},"assert"),p("span",{class:"token punctuation"},"("),c("status "),p("span",{class:"token operator"},"=="),c(" napi_ok"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n  bool is_constructor "),p("span",{class:"token operator"},"="),c(" target "),p("span",{class:"token operator"},"!="),c(" nullptr"),p("span",{class:"token punctuation"},";"),c("\n  "),p("span",{class:"token comment"},"// new.target指向被new调用的构造函数，如果该方法不是构造函数，则会返回null"),c("\n\n  "),p("span",{class:"token keyword"},"if"),c(),p("span",{class:"token punctuation"},"("),c("is_constructor"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token punctuation"},"{"),c("\n    "),p("span",{class:"token comment"},"// 被当作构造函数调用"),c("\n    "),p("span",{class:"token comment"},"// Invoked as constructor: `new MyObject(...)`"),c("\n    "),p("span",{class:"token class-name"},"size_t"),c(" argc "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},";"),c("\n    napi_value args"),p("span",{class:"token punctuation"},"["),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},";"),c("\n    napi_value jsthis"),p("span",{class:"token punctuation"},";"),c("  "),p("span",{class:"token comment"},"// 构造函数应有this"),c("\n    status "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"napi_get_cb_info"),p("span",{class:"token punctuation"},"("),c("env"),p("span",{class:"token punctuation"},","),c(" info"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token operator"},"&"),c("argc"),p("span",{class:"token punctuation"},","),c(" args"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token operator"},"&"),c("jsthis"),p("span",{class:"token punctuation"},","),c(" nullptr"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n    "),p("span",{class:"token function"},"assert"),p("span",{class:"token punctuation"},"("),c("status "),p("span",{class:"token operator"},"=="),c(" napi_ok"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n\n    "),p("span",{class:"token keyword"},"double"),c(" value "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},";"),c("\n\n    napi_valuetype valuetype"),p("span",{class:"token punctuation"},";"),c("\n    status "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"napi_typeof"),p("span",{class:"token punctuation"},"("),c("env"),p("span",{class:"token punctuation"},","),c(" args"),p("span",{class:"token punctuation"},"["),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token operator"},"&"),c("valuetype"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n    "),p("span",{class:"token function"},"assert"),p("span",{class:"token punctuation"},"("),c("status "),p("span",{class:"token operator"},"=="),c(" napi_ok"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n\n    "),p("span",{class:"token keyword"},"if"),c(),p("span",{class:"token punctuation"},"("),c("valuetype "),p("span",{class:"token operator"},"!="),c(" napi_undefined"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token punctuation"},"{"),c("\n      status "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"napi_get_value_double"),p("span",{class:"token punctuation"},"("),c("env"),p("span",{class:"token punctuation"},","),c(" args"),p("span",{class:"token punctuation"},"["),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token operator"},"&"),c("value"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n      "),p("span",{class:"token function"},"assert"),p("span",{class:"token punctuation"},"("),c("status "),p("span",{class:"token operator"},"=="),c(" napi_ok"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n    "),p("span",{class:"token punctuation"},"}"),c("\n\n    MyObject"),p("span",{class:"token operator"},"*"),c(" obj "),p("span",{class:"token operator"},"="),c(" new "),p("span",{class:"token function"},"MyObject"),p("span",{class:"token punctuation"},"("),c("value"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n\n    obj"),p("span",{class:"token operator"},"->"),c("env_ "),p("span",{class:"token operator"},"="),c(" env"),p("span",{class:"token punctuation"},";"),c("\n    status "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"napi_wrap"),p("span",{class:"token punctuation"},"("),c("env"),p("span",{class:"token punctuation"},","),c("\n                       jsthis"),p("span",{class:"token punctuation"},","),c("  "),p("span",{class:"token comment"},"// 将obj 包装成this"),c("\n                       reinterpret_cast"),p("span",{class:"token operator"},"<"),p("span",{class:"token keyword"},"void"),p("span",{class:"token operator"},"*"),p("span",{class:"token operator"},">"),p("span",{class:"token punctuation"},"("),c("obj"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},","),c("  "),p("span",{class:"token comment"},"// 本地对象"),c("\n                       MyObject"),p("span",{class:"token operator"},"::"),c("Destructor"),p("span",{class:"token punctuation"},","),c("  "),p("span",{class:"token comment"},"// 准备垃圾回收时销毁本地对象"),c("\n                       nullptr"),p("span",{class:"token punctuation"},","),c("  "),p("span",{class:"token comment"},"// finalize_hint，可选提示"),c("\n                       "),p("span",{class:"token operator"},"&"),c("obj"),p("span",{class:"token operator"},"->"),c("wrapper_"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("  "),p("span",{class:"token comment"},"// 返回值"),c("\n    "),p("span",{class:"token function"},"assert"),p("span",{class:"token punctuation"},"("),c("status "),p("span",{class:"token operator"},"=="),c(" napi_ok"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n\n    "),p("span",{class:"token keyword"},"return"),c(" jsthis"),p("span",{class:"token punctuation"},";"),c("\n  "),p("span",{class:"token punctuation"},"}"),c(),p("span",{class:"token keyword"},"else"),c(),p("span",{class:"token punctuation"},"{"),c("\n    "),p("span",{class:"token comment"},"// 被当作普通函数调用"),c("\n    "),p("span",{class:"token comment"},"// Invoked as plain function `MyObject(...)`, turn into construct call."),c("\n    "),p("span",{class:"token class-name"},"size_t"),c(" argc_ "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},";"),c("\n    napi_value args"),p("span",{class:"token punctuation"},"["),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},";"),c("\n    status "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"napi_get_cb_info"),p("span",{class:"token punctuation"},"("),c("env"),p("span",{class:"token punctuation"},","),c(" info"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token operator"},"&"),c("argc_"),p("span",{class:"token punctuation"},","),c(" args"),p("span",{class:"token punctuation"},","),c(" nullptr"),p("span",{class:"token punctuation"},","),c(" nullptr"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n    "),p("span",{class:"token function"},"assert"),p("span",{class:"token punctuation"},"("),c("status "),p("span",{class:"token operator"},"=="),c(" napi_ok"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n\n    "),p("span",{class:"token keyword"},"const"),c(),p("span",{class:"token class-name"},"size_t"),c(" argc "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},";"),c("\n    napi_value argv"),p("span",{class:"token punctuation"},"["),c("argc"),p("span",{class:"token punctuation"},"]"),c(),p("span",{class:"token operator"},"="),c(),p("span",{class:"token punctuation"},"{"),c("args"),p("span",{class:"token punctuation"},"["),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},"}"),p("span",{class:"token punctuation"},";"),c("\n\n    napi_value instance"),p("span",{class:"token punctuation"},";"),c("\n    status "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"napi_new_instance"),p("span",{class:"token punctuation"},"("),c("env"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token function"},"Constructor"),p("span",{class:"token punctuation"},"("),c("env"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},","),c(" argc"),p("span",{class:"token punctuation"},","),c(" argv"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token operator"},"&"),c("instance"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n    "),p("span",{class:"token function"},"assert"),p("span",{class:"token punctuation"},"("),c("status "),p("span",{class:"token operator"},"=="),c(" napi_ok"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n\n    "),p("span",{class:"token keyword"},"return"),c(" instance"),p("span",{class:"token punctuation"},";"),c("\n  "),p("span",{class:"token punctuation"},"}"),c("\n"),p("span",{class:"token punctuation"},"}"),c("\n\n"),p("span",{class:"token comment"},"// Getter、Setter"),c("\nnapi_value MyObject"),p("span",{class:"token operator"},"::"),p("span",{class:"token function"},"GetValue"),p("span",{class:"token punctuation"},"("),c("napi_env env"),p("span",{class:"token punctuation"},","),c(" napi_callback_info info"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token punctuation"},"{"),c("\n  napi_status status"),p("span",{class:"token punctuation"},";"),c("\n\n  napi_value jsthis"),p("span",{class:"token punctuation"},";"),c("\n  status "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"napi_get_cb_info"),p("span",{class:"token punctuation"},"("),c("env"),p("span",{class:"token punctuation"},","),c(" info"),p("span",{class:"token punctuation"},","),c(" nullptr"),p("span",{class:"token punctuation"},","),c(" nullptr"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token operator"},"&"),c("jsthis"),p("span",{class:"token punctuation"},","),c(" nullptr"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n  "),p("span",{class:"token function"},"assert"),p("span",{class:"token punctuation"},"("),c("status "),p("span",{class:"token operator"},"=="),c(" napi_ok"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n\n  MyObject"),p("span",{class:"token operator"},"*"),c(" obj"),p("span",{class:"token punctuation"},";"),c("\n  "),p("span",{class:"token comment"},"// 解除包装"),c("\n  status "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"napi_unwrap"),p("span",{class:"token punctuation"},"("),c("env"),p("span",{class:"token punctuation"},","),c(" jsthis"),p("span",{class:"token punctuation"},","),c(" reinterpret_cast"),p("span",{class:"token operator"},"<"),p("span",{class:"token keyword"},"void"),p("span",{class:"token operator"},"*"),p("span",{class:"token operator"},"*"),p("span",{class:"token operator"},">"),p("span",{class:"token punctuation"},"("),p("span",{class:"token operator"},"&"),c("obj"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n  "),p("span",{class:"token function"},"assert"),p("span",{class:"token punctuation"},"("),c("status "),p("span",{class:"token operator"},"=="),c(" napi_ok"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n\n  napi_value num"),p("span",{class:"token punctuation"},";"),c("\n  status "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"napi_create_double"),p("span",{class:"token punctuation"},"("),c("env"),p("span",{class:"token punctuation"},","),c(" obj"),p("span",{class:"token operator"},"->"),c("value_"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token operator"},"&"),c("num"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n  "),p("span",{class:"token function"},"assert"),p("span",{class:"token punctuation"},"("),c("status "),p("span",{class:"token operator"},"=="),c(" napi_ok"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n\n  "),p("span",{class:"token keyword"},"return"),c(" num"),p("span",{class:"token punctuation"},";"),c("\n"),p("span",{class:"token punctuation"},"}"),c("\n\nnapi_value MyObject"),p("span",{class:"token operator"},"::"),p("span",{class:"token function"},"SetValue"),p("span",{class:"token punctuation"},"("),c("napi_env env"),p("span",{class:"token punctuation"},","),c(" napi_callback_info info"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token punctuation"},"{"),c("\n  napi_status status"),p("span",{class:"token punctuation"},";"),c("\n\n  "),p("span",{class:"token class-name"},"size_t"),c(" argc "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},";"),c("\n  napi_value value"),p("span",{class:"token punctuation"},";"),c("\n  napi_value jsthis"),p("span",{class:"token punctuation"},";"),c("\n  status "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"napi_get_cb_info"),p("span",{class:"token punctuation"},"("),c("env"),p("span",{class:"token punctuation"},","),c(" info"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token operator"},"&"),c("argc"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token operator"},"&"),c("value"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token operator"},"&"),c("jsthis"),p("span",{class:"token punctuation"},","),c(" nullptr"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n  "),p("span",{class:"token function"},"assert"),p("span",{class:"token punctuation"},"("),c("status "),p("span",{class:"token operator"},"=="),c(" napi_ok"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n\n  MyObject"),p("span",{class:"token operator"},"*"),c(" obj"),p("span",{class:"token punctuation"},";"),c("\n  status "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"napi_unwrap"),p("span",{class:"token punctuation"},"("),c("env"),p("span",{class:"token punctuation"},","),c(" jsthis"),p("span",{class:"token punctuation"},","),c(" reinterpret_cast"),p("span",{class:"token operator"},"<"),p("span",{class:"token keyword"},"void"),p("span",{class:"token operator"},"*"),p("span",{class:"token operator"},"*"),p("span",{class:"token operator"},">"),p("span",{class:"token punctuation"},"("),p("span",{class:"token operator"},"&"),c("obj"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n  "),p("span",{class:"token function"},"assert"),p("span",{class:"token punctuation"},"("),c("status "),p("span",{class:"token operator"},"=="),c(" napi_ok"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n\n  "),p("span",{class:"token comment"},"// 虽然是get 函数，但是将传入的值get 到对象属性上面去了。。。"),c("\n  status "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"napi_get_value_double"),p("span",{class:"token punctuation"},"("),c("env"),p("span",{class:"token punctuation"},","),c(" value"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token operator"},"&"),c("obj"),p("span",{class:"token operator"},"->"),c("value_"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n  "),p("span",{class:"token function"},"assert"),p("span",{class:"token punctuation"},"("),c("status "),p("span",{class:"token operator"},"=="),c(" napi_ok"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n\n  "),p("span",{class:"token keyword"},"return"),c(" nullptr"),p("span",{class:"token punctuation"},";"),c("\n"),p("span",{class:"token punctuation"},"}"),c("\n\nnapi_value MyObject"),p("span",{class:"token operator"},"::"),p("span",{class:"token function"},"PlusOne"),p("span",{class:"token punctuation"},"("),c("napi_env env"),p("span",{class:"token punctuation"},","),c(" napi_callback_info info"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token punctuation"},"{"),c("\n  napi_status status"),p("span",{class:"token punctuation"},";"),c("\n\n  napi_value jsthis"),p("span",{class:"token punctuation"},";"),c("\n  status "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"napi_get_cb_info"),p("span",{class:"token punctuation"},"("),c("env"),p("span",{class:"token punctuation"},","),c(" info"),p("span",{class:"token punctuation"},","),c(" nullptr"),p("span",{class:"token punctuation"},","),c(" nullptr"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token operator"},"&"),c("jsthis"),p("span",{class:"token punctuation"},","),c(" nullptr"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n  "),p("span",{class:"token function"},"assert"),p("span",{class:"token punctuation"},"("),c("status "),p("span",{class:"token operator"},"=="),c(" napi_ok"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n\n  MyObject"),p("span",{class:"token operator"},"*"),c(" obj"),p("span",{class:"token punctuation"},";"),c("\n  status "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"napi_unwrap"),p("span",{class:"token punctuation"},"("),c("env"),p("span",{class:"token punctuation"},","),c(" jsthis"),p("span",{class:"token punctuation"},","),c(" reinterpret_cast"),p("span",{class:"token operator"},"<"),p("span",{class:"token keyword"},"void"),p("span",{class:"token operator"},"*"),p("span",{class:"token operator"},"*"),p("span",{class:"token operator"},">"),p("span",{class:"token punctuation"},"("),p("span",{class:"token operator"},"&"),c("obj"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n  "),p("span",{class:"token function"},"assert"),p("span",{class:"token punctuation"},"("),c("status "),p("span",{class:"token operator"},"=="),c(" napi_ok"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n\n  obj"),p("span",{class:"token operator"},"->"),c("value_ "),p("span",{class:"token operator"},"+="),c(),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},";"),c("\n\n  napi_value num"),p("span",{class:"token punctuation"},";"),c("\n  status "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"napi_create_double"),p("span",{class:"token punctuation"},"("),c("env"),p("span",{class:"token punctuation"},","),c(" obj"),p("span",{class:"token operator"},"->"),c("value_"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token operator"},"&"),c("num"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n  "),p("span",{class:"token function"},"assert"),p("span",{class:"token punctuation"},"("),c("status "),p("span",{class:"token operator"},"=="),c(" napi_ok"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n\n  "),p("span",{class:"token keyword"},"return"),c(" num"),p("span",{class:"token punctuation"},";"),c("\n"),p("span",{class:"token punctuation"},"}"),c("\n\nnapi_value MyObject"),p("span",{class:"token operator"},"::"),p("span",{class:"token function"},"Multiply"),p("span",{class:"token punctuation"},"("),c("napi_env env"),p("span",{class:"token punctuation"},","),c(" napi_callback_info info"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token punctuation"},"{"),c("\n  napi_status status"),p("span",{class:"token punctuation"},";"),c("\n\n  "),p("span",{class:"token class-name"},"size_t"),c(" argc "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},";"),c("\n  napi_value args"),p("span",{class:"token punctuation"},"["),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},";"),c("\n  napi_value jsthis"),p("span",{class:"token punctuation"},";"),c("\n  status "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"napi_get_cb_info"),p("span",{class:"token punctuation"},"("),c("env"),p("span",{class:"token punctuation"},","),c(" info"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token operator"},"&"),c("argc"),p("span",{class:"token punctuation"},","),c(" args"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token operator"},"&"),c("jsthis"),p("span",{class:"token punctuation"},","),c(" nullptr"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n  "),p("span",{class:"token function"},"assert"),p("span",{class:"token punctuation"},"("),c("status "),p("span",{class:"token operator"},"=="),c(" napi_ok"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n\n  napi_valuetype valuetype"),p("span",{class:"token punctuation"},";"),c("\n  status "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"napi_typeof"),p("span",{class:"token punctuation"},"("),c("env"),p("span",{class:"token punctuation"},","),c(" args"),p("span",{class:"token punctuation"},"["),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token operator"},"&"),c("valuetype"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n  "),p("span",{class:"token function"},"assert"),p("span",{class:"token punctuation"},"("),c("status "),p("span",{class:"token operator"},"=="),c(" napi_ok"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n\n  "),p("span",{class:"token keyword"},"double"),c(" multiple "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},";"),c("\n  "),p("span",{class:"token keyword"},"if"),c(),p("span",{class:"token punctuation"},"("),c("valuetype "),p("span",{class:"token operator"},"!="),c(" napi_undefined"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token punctuation"},"{"),c("\n    status "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"napi_get_value_double"),p("span",{class:"token punctuation"},"("),c("env"),p("span",{class:"token punctuation"},","),c(" args"),p("span",{class:"token punctuation"},"["),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token operator"},"&"),c("multiple"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n    "),p("span",{class:"token function"},"assert"),p("span",{class:"token punctuation"},"("),c("status "),p("span",{class:"token operator"},"=="),c(" napi_ok"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n  "),p("span",{class:"token punctuation"},"}"),c("\n\n  MyObject"),p("span",{class:"token operator"},"*"),c(" obj"),p("span",{class:"token punctuation"},";"),c("\n  status "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"napi_unwrap"),p("span",{class:"token punctuation"},"("),c("env"),p("span",{class:"token punctuation"},","),c(" jsthis"),p("span",{class:"token punctuation"},","),c(" reinterpret_cast"),p("span",{class:"token operator"},"<"),p("span",{class:"token keyword"},"void"),p("span",{class:"token operator"},"*"),p("span",{class:"token operator"},"*"),p("span",{class:"token operator"},">"),p("span",{class:"token punctuation"},"("),p("span",{class:"token operator"},"&"),c("obj"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n  "),p("span",{class:"token function"},"assert"),p("span",{class:"token punctuation"},"("),c("status "),p("span",{class:"token operator"},"=="),c(" napi_ok"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n\n  "),p("span",{class:"token keyword"},"const"),c(),p("span",{class:"token keyword"},"int"),c(" kArgCount "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},";"),c("\n  napi_value argv"),p("span",{class:"token punctuation"},"["),c("kArgCount"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},";"),c("\n  status "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"napi_create_double"),p("span",{class:"token punctuation"},"("),c("env"),p("span",{class:"token punctuation"},","),c(" obj"),p("span",{class:"token operator"},"->"),c("value_ "),p("span",{class:"token operator"},"*"),c(" multiple"),p("span",{class:"token punctuation"},","),c(" argv"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n  "),p("span",{class:"token function"},"assert"),p("span",{class:"token punctuation"},"("),c("status "),p("span",{class:"token operator"},"=="),c(" napi_ok"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n\n  napi_value instance"),p("span",{class:"token punctuation"},";"),c("\n  status "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"napi_new_instance"),p("span",{class:"token punctuation"},"("),c("env"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token function"},"Constructor"),p("span",{class:"token punctuation"},"("),c("env"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},","),c(" kArgCount"),p("span",{class:"token punctuation"},","),c(" argv"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token operator"},"&"),c("instance"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n  "),p("span",{class:"token function"},"assert"),p("span",{class:"token punctuation"},"("),c("status "),p("span",{class:"token operator"},"=="),c(" napi_ok"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n\n  "),p("span",{class:"token keyword"},"return"),c(" instance"),p("span",{class:"token punctuation"},";"),c("\n"),p("span",{class:"token punctuation"},"}"),c("\n")])]),p("div",{class:"line-numbers"},[p("span",{class:"line-number"},"1"),p("br"),p("span",{class:"line-number"},"2"),p("br"),p("span",{class:"line-number"},"3"),p("br"),p("span",{class:"line-number"},"4"),p("br"),p("span",{class:"line-number"},"5"),p("br"),p("span",{class:"line-number"},"6"),p("br"),p("span",{class:"line-number"},"7"),p("br"),p("span",{class:"line-number"},"8"),p("br"),p("span",{class:"line-number"},"9"),p("br"),p("span",{class:"line-number"},"10"),p("br"),p("span",{class:"line-number"},"11"),p("br"),p("span",{class:"line-number"},"12"),p("br"),p("span",{class:"line-number"},"13"),p("br"),p("span",{class:"line-number"},"14"),p("br"),p("span",{class:"line-number"},"15"),p("br"),p("span",{class:"line-number"},"16"),p("br"),p("span",{class:"line-number"},"17"),p("br"),p("span",{class:"line-number"},"18"),p("br"),p("span",{class:"line-number"},"19"),p("br"),p("span",{class:"line-number"},"20"),p("br"),p("span",{class:"line-number"},"21"),p("br"),p("span",{class:"line-number"},"22"),p("br"),p("span",{class:"line-number"},"23"),p("br"),p("span",{class:"line-number"},"24"),p("br"),p("span",{class:"line-number"},"25"),p("br"),p("span",{class:"line-number"},"26"),p("br"),p("span",{class:"line-number"},"27"),p("br"),p("span",{class:"line-number"},"28"),p("br"),p("span",{class:"line-number"},"29"),p("br"),p("span",{class:"line-number"},"30"),p("br"),p("span",{class:"line-number"},"31"),p("br"),p("span",{class:"line-number"},"32"),p("br"),p("span",{class:"line-number"},"33"),p("br"),p("span",{class:"line-number"},"34"),p("br"),p("span",{class:"line-number"},"35"),p("br"),p("span",{class:"line-number"},"36"),p("br"),p("span",{class:"line-number"},"37"),p("br"),p("span",{class:"line-number"},"38"),p("br"),p("span",{class:"line-number"},"39"),p("br"),p("span",{class:"line-number"},"40"),p("br"),p("span",{class:"line-number"},"41"),p("br"),p("span",{class:"line-number"},"42"),p("br"),p("span",{class:"line-number"},"43"),p("br"),p("span",{class:"line-number"},"44"),p("br"),p("span",{class:"line-number"},"45"),p("br"),p("span",{class:"line-number"},"46"),p("br"),p("span",{class:"line-number"},"47"),p("br"),p("span",{class:"line-number"},"48"),p("br"),p("span",{class:"line-number"},"49"),p("br"),p("span",{class:"line-number"},"50"),p("br"),p("span",{class:"line-number"},"51"),p("br"),p("span",{class:"line-number"},"52"),p("br"),p("span",{class:"line-number"},"53"),p("br"),p("span",{class:"line-number"},"54"),p("br"),p("span",{class:"line-number"},"55"),p("br"),p("span",{class:"line-number"},"56"),p("br"),p("span",{class:"line-number"},"57"),p("br"),p("span",{class:"line-number"},"58"),p("br"),p("span",{class:"line-number"},"59"),p("br"),p("span",{class:"line-number"},"60"),p("br"),p("span",{class:"line-number"},"61"),p("br"),p("span",{class:"line-number"},"62"),p("br"),p("span",{class:"line-number"},"63"),p("br"),p("span",{class:"line-number"},"64"),p("br"),p("span",{class:"line-number"},"65"),p("br"),p("span",{class:"line-number"},"66"),p("br"),p("span",{class:"line-number"},"67"),p("br"),p("span",{class:"line-number"},"68"),p("br"),p("span",{class:"line-number"},"69"),p("br"),p("span",{class:"line-number"},"70"),p("br"),p("span",{class:"line-number"},"71"),p("br"),p("span",{class:"line-number"},"72"),p("br"),p("span",{class:"line-number"},"73"),p("br"),p("span",{class:"line-number"},"74"),p("br"),p("span",{class:"line-number"},"75"),p("br"),p("span",{class:"line-number"},"76"),p("br"),p("span",{class:"line-number"},"77"),p("br"),p("span",{class:"line-number"},"78"),p("br"),p("span",{class:"line-number"},"79"),p("br"),p("span",{class:"line-number"},"80"),p("br"),p("span",{class:"line-number"},"81"),p("br"),p("span",{class:"line-number"},"82"),p("br"),p("span",{class:"line-number"},"83"),p("br"),p("span",{class:"line-number"},"84"),p("br"),p("span",{class:"line-number"},"85"),p("br"),p("span",{class:"line-number"},"86"),p("br"),p("span",{class:"line-number"},"87"),p("br"),p("span",{class:"line-number"},"88"),p("br"),p("span",{class:"line-number"},"89"),p("br"),p("span",{class:"line-number"},"90"),p("br"),p("span",{class:"line-number"},"91"),p("br"),p("span",{class:"line-number"},"92"),p("br"),p("span",{class:"line-number"},"93"),p("br"),p("span",{class:"line-number"},"94"),p("br"),p("span",{class:"line-number"},"95"),p("br"),p("span",{class:"line-number"},"96"),p("br"),p("span",{class:"line-number"},"97"),p("br"),p("span",{class:"line-number"},"98"),p("br"),p("span",{class:"line-number"},"99"),p("br"),p("span",{class:"line-number"},"100"),p("br"),p("span",{class:"line-number"},"101"),p("br"),p("span",{class:"line-number"},"102"),p("br"),p("span",{class:"line-number"},"103"),p("br"),p("span",{class:"line-number"},"104"),p("br"),p("span",{class:"line-number"},"105"),p("br"),p("span",{class:"line-number"},"106"),p("br"),p("span",{class:"line-number"},"107"),p("br"),p("span",{class:"line-number"},"108"),p("br"),p("span",{class:"line-number"},"109"),p("br"),p("span",{class:"line-number"},"110"),p("br"),p("span",{class:"line-number"},"111"),p("br"),p("span",{class:"line-number"},"112"),p("br"),p("span",{class:"line-number"},"113"),p("br"),p("span",{class:"line-number"},"114"),p("br"),p("span",{class:"line-number"},"115"),p("br"),p("span",{class:"line-number"},"116"),p("br"),p("span",{class:"line-number"},"117"),p("br"),p("span",{class:"line-number"},"118"),p("br"),p("span",{class:"line-number"},"119"),p("br"),p("span",{class:"line-number"},"120"),p("br"),p("span",{class:"line-number"},"121"),p("br"),p("span",{class:"line-number"},"122"),p("br"),p("span",{class:"line-number"},"123"),p("br"),p("span",{class:"line-number"},"124"),p("br"),p("span",{class:"line-number"},"125"),p("br"),p("span",{class:"line-number"},"126"),p("br"),p("span",{class:"line-number"},"127"),p("br"),p("span",{class:"line-number"},"128"),p("br"),p("span",{class:"line-number"},"129"),p("br"),p("span",{class:"line-number"},"130"),p("br"),p("span",{class:"line-number"},"131"),p("br"),p("span",{class:"line-number"},"132"),p("br"),p("span",{class:"line-number"},"133"),p("br"),p("span",{class:"line-number"},"134"),p("br"),p("span",{class:"line-number"},"135"),p("br"),p("span",{class:"line-number"},"136"),p("br"),p("span",{class:"line-number"},"137"),p("br"),p("span",{class:"line-number"},"138"),p("br"),p("span",{class:"line-number"},"139"),p("br"),p("span",{class:"line-number"},"140"),p("br"),p("span",{class:"line-number"},"141"),p("br"),p("span",{class:"line-number"},"142"),p("br"),p("span",{class:"line-number"},"143"),p("br"),p("span",{class:"line-number"},"144"),p("br"),p("span",{class:"line-number"},"145"),p("br"),p("span",{class:"line-number"},"146"),p("br"),p("span",{class:"line-number"},"147"),p("br"),p("span",{class:"line-number"},"148"),p("br"),p("span",{class:"line-number"},"149"),p("br"),p("span",{class:"line-number"},"150"),p("br"),p("span",{class:"line-number"},"151"),p("br"),p("span",{class:"line-number"},"152"),p("br"),p("span",{class:"line-number"},"153"),p("br"),p("span",{class:"line-number"},"154"),p("br"),p("span",{class:"line-number"},"155"),p("br"),p("span",{class:"line-number"},"156"),p("br"),p("span",{class:"line-number"},"157"),p("br"),p("span",{class:"line-number"},"158"),p("br"),p("span",{class:"line-number"},"159"),p("br"),p("span",{class:"line-number"},"160"),p("br"),p("span",{class:"line-number"},"161"),p("br"),p("span",{class:"line-number"},"162"),p("br"),p("span",{class:"line-number"},"163"),p("br"),p("span",{class:"line-number"},"164"),p("br"),p("span",{class:"line-number"},"165"),p("br"),p("span",{class:"line-number"},"166"),p("br"),p("span",{class:"line-number"},"167"),p("br"),p("span",{class:"line-number"},"168"),p("br"),p("span",{class:"line-number"},"169"),p("br"),p("span",{class:"line-number"},"170"),p("br"),p("span",{class:"line-number"},"171"),p("br"),p("span",{class:"line-number"},"172"),p("br"),p("span",{class:"line-number"},"173"),p("br"),p("span",{class:"line-number"},"174"),p("br"),p("span",{class:"line-number"},"175"),p("br"),p("span",{class:"line-number"},"176"),p("br"),p("span",{class:"line-number"},"177"),p("br"),p("span",{class:"line-number"},"178"),p("br"),p("span",{class:"line-number"},"179"),p("br"),p("span",{class:"line-number"},"180"),p("br"),p("span",{class:"line-number"},"181"),p("br"),p("span",{class:"line-number"},"182"),p("br"),p("span",{class:"line-number"},"183"),p("br"),p("span",{class:"line-number"},"184"),p("br"),p("span",{class:"line-number"},"185"),p("br"),p("span",{class:"line-number"},"186"),p("br"),p("span",{class:"line-number"},"187"),p("br"),p("span",{class:"line-number"},"188"),p("br"),p("span",{class:"line-number"},"189"),p("br"),p("span",{class:"line-number"},"190"),p("br"),p("span",{class:"line-number"},"191"),p("br"),p("span",{class:"line-number"},"192"),p("br"),p("span",{class:"line-number"},"193"),p("br"),p("span",{class:"line-number"},"194"),p("br"),p("span",{class:"line-number"},"195"),p("br"),p("span",{class:"line-number"},"196"),p("br"),p("span",{class:"line-number"},"197"),p("br"),p("span",{class:"line-number"},"198"),p("br"),p("span",{class:"line-number"},"199"),p("br"),p("span",{class:"line-number"},"200"),p("br"),p("span",{class:"line-number"},"201"),p("br"),p("span",{class:"line-number"},"202"),p("br"),p("span",{class:"line-number"},"203"),p("br"),p("span",{class:"line-number"},"204"),p("br"),p("span",{class:"line-number"},"205"),p("br"),p("span",{class:"line-number"},"206"),p("br"),p("span",{class:"line-number"},"207"),p("br"),p("span",{class:"line-number"},"208"),p("br"),p("span",{class:"line-number"},"209"),p("br"),p("span",{class:"line-number"},"210"),p("br"),p("span",{class:"line-number"},"211"),p("br"),p("span",{class:"line-number"},"212"),p("br"),p("span",{class:"line-number"},"213"),p("br"),p("span",{class:"line-number"},"214"),p("br"),p("span",{class:"line-number"},"215"),p("br"),p("span",{class:"line-number"},"216"),p("br"),p("span",{class:"line-number"},"217"),p("br"),p("span",{class:"line-number"},"218"),p("br"),p("span",{class:"line-number"},"219"),p("br"),p("span",{class:"line-number"},"220"),p("br"),p("span",{class:"line-number"},"221"),p("br"),p("span",{class:"line-number"},"222"),p("br"),p("span",{class:"line-number"},"223"),p("br"),p("span",{class:"line-number"},"224"),p("br"),p("span",{class:"line-number"},"225"),p("br"),p("span",{class:"line-number"},"226"),p("br"),p("span",{class:"line-number"},"227"),p("br"),p("span",{class:"line-number"},"228"),p("br"),p("span",{class:"line-number"},"229"),p("br"),p("span",{class:"line-number"},"230"),p("br"),p("span",{class:"line-number"},"231"),p("br"),p("span",{class:"line-number"},"232"),p("br"),p("span",{class:"line-number"},"233"),p("br"),p("span",{class:"line-number"},"234"),p("br"),p("span",{class:"line-number"},"235"),p("br"),p("span",{class:"line-number"},"236"),p("br"),p("span",{class:"line-number"},"237"),p("br"),p("span",{class:"line-number"},"238"),p("br"),p("span",{class:"line-number"},"239"),p("br"),p("span",{class:"line-number"},"240"),p("br"),p("span",{class:"line-number"},"241"),p("br"),p("span",{class:"line-number"},"242"),p("br"),p("span",{class:"line-number"},"243"),p("br"),p("span",{class:"line-number"},"244"),p("br"),p("span",{class:"line-number"},"245"),p("br"),p("span",{class:"line-number"},"246"),p("br"),p("span",{class:"line-number"},"247"),p("br"),p("span",{class:"line-number"},"248"),p("br"),p("span",{class:"line-number"},"249"),p("br")])],-1),g=o('<h3 id="工厂封装"><a class="header-anchor" href="#工厂封装">#</a> 工厂封装</h3><p>仍然以<code>MyObject</code> 为例，工厂的封装其实就相当于增加了一个调用对象构造函数的层。</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;myobject.h&quot;</span></span>\n\nnapi_value <span class="token function">CreateObject</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_callback_info info<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  napi_status status<span class="token punctuation">;</span>\n\n  <span class="token class-name">size_t</span> argc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  napi_value args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  status <span class="token operator">=</span> <span class="token function">napi_get_cb_info</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> info<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> args<span class="token punctuation">,</span> nullptr<span class="token punctuation">,</span> nullptr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">assert</span><span class="token punctuation">(</span>status <span class="token operator">==</span> napi_ok<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  napi_value instance<span class="token punctuation">;</span>\n  status <span class="token operator">=</span> MyObject<span class="token operator">::</span><span class="token function">NewInstance</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">assert</span><span class="token punctuation">(</span>status <span class="token operator">==</span> napi_ok<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> instance<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nnapi_value <span class="token function">Init</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value exports<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 仍然需要在加载插件时初始化MyObject 类</span>\n  napi_status status <span class="token operator">=</span> MyObject<span class="token operator">::</span><span class="token function">Init</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">assert</span><span class="token punctuation">(</span>status <span class="token operator">==</span> napi_ok<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  napi_value new_exports<span class="token punctuation">;</span>\n  status <span class="token operator">=</span> <span class="token function">napi_create_function</span><span class="token punctuation">(</span>\n      env<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> NAPI_AUTO_LENGTH<span class="token punctuation">,</span> CreateObject<span class="token punctuation">,</span> nullptr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>new_exports<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">assert</span><span class="token punctuation">(</span>status <span class="token operator">==</span> napi_ok<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> new_exports<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">NAPI_MODULE</span><span class="token punctuation">(</span>NODE_GYP_MODULE_NAME<span class="token punctuation">,</span> Init<span class="token punctuation">)</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h3 id="passing-wraoed"><a class="header-anchor" href="#passing-wraoed">#</a> Passing_Wraoed</h3><p>说实话这一节我不知道该如何翻译，因为内容开起来与前面的东西没有什么不同。无非是增加了一个函数，可以将JS 对象转化为C++ 对象并进行处理。</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;myobject.h&quot;</span></span>\n\n<span class="token comment">// 对象工厂</span>\nnapi_value <span class="token function">CreateObject</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_callback_info info<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  napi_status status<span class="token punctuation">;</span>\n\n  <span class="token class-name">size_t</span> argc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  napi_value args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  status <span class="token operator">=</span> <span class="token function">napi_get_cb_info</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> info<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> args<span class="token punctuation">,</span> nullptr<span class="token punctuation">,</span> nullptr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">assert</span><span class="token punctuation">(</span>status <span class="token operator">==</span> napi_ok<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  napi_value instance<span class="token punctuation">;</span>\n  status <span class="token operator">=</span> MyObject<span class="token operator">::</span><span class="token function">NewInstance</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> instance<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 对象的加法函数</span>\nnapi_value <span class="token function">Add</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_callback_info info<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  napi_status status<span class="token punctuation">;</span>\n\n  <span class="token class-name">size_t</span> argc <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n  napi_value args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  status <span class="token operator">=</span> <span class="token function">napi_get_cb_info</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> info<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> args<span class="token punctuation">,</span> nullptr<span class="token punctuation">,</span> nullptr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">assert</span><span class="token punctuation">(</span>status <span class="token operator">==</span> napi_ok<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 类型转换</span>\n  MyObject<span class="token operator">*</span> obj1<span class="token punctuation">;</span>\n  status <span class="token operator">=</span> <span class="token function">napi_unwrap</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reinterpret_cast<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>obj1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">assert</span><span class="token punctuation">(</span>status <span class="token operator">==</span> napi_ok<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  MyObject<span class="token operator">*</span> obj2<span class="token punctuation">;</span>\n  status <span class="token operator">=</span> <span class="token function">napi_unwrap</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reinterpret_cast<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>obj2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">assert</span><span class="token punctuation">(</span>status <span class="token operator">==</span> napi_ok<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  napi_value sum<span class="token punctuation">;</span>\n  status <span class="token operator">=</span> <span class="token function">napi_create_double</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> obj1<span class="token operator">-&gt;</span><span class="token function">Val</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> obj2<span class="token operator">-&gt;</span><span class="token function">Val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">assert</span><span class="token punctuation">(</span>status <span class="token operator">==</span> napi_ok<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> sum<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">DECLARE_NAPI_METHOD</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">,</span> func<span class="token punctuation">)</span>                                        </span><span class="token punctuation">\\</span>\n  <span class="token expression"><span class="token punctuation">{</span> name<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> func<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> napi_default<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">}</span></span></span>\n\nnapi_value <span class="token function">Init</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value exports<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  napi_status status<span class="token punctuation">;</span>\n\n  MyObject<span class="token operator">::</span><span class="token function">Init</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  napi_property_descriptor desc<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n      <span class="token function">DECLARE_NAPI_METHOD</span><span class="token punctuation">(</span><span class="token string">&quot;createObject&quot;</span><span class="token punctuation">,</span> CreateObject<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token function">DECLARE_NAPI_METHOD</span><span class="token punctuation">(</span><span class="token string">&quot;add&quot;</span><span class="token punctuation">,</span> Add<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  status <span class="token operator">=</span>\n      <span class="token function">napi_define_properties</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>desc<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>desc<span class="token punctuation">)</span><span class="token punctuation">,</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">assert</span><span class="token punctuation">(</span>status <span class="token operator">==</span> napi_ok<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> exports<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">NAPI_MODULE</span><span class="token punctuation">(</span>NODE_GYP_MODULE_NAME<span class="token punctuation">,</span> Init<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br></div></div>',6),y=c("看到这里，我们就会发现，虽然可以使用C++ 来封装代码，但是工作量依然好大，能不能再简单一些，让我们可以直接写C++ 代码就行了。幸运的是，官方已经在维护这样的库了："),h={href:"https://github.com/nodejs/node-addon-api",target:"_blank",rel:"noopener noreferrer"},N=c("node-addon-api"),E=c("。"),w=o('<h2 id="node-addon-api"><a class="header-anchor" href="#node-addon-api">#</a> node-addon-api</h2><p>在理解了上述代码之后，就理清了<code>n-api</code> 插件的工作原理，基于<code>node-addon-api</code> 的开发也就水到渠成了。下面仅记录一下<code>node-addon-api</code> 的安装过程。</p><h3 id="前提条件"><a class="header-anchor" href="#前提条件">#</a> 前提条件</h3><ul><li>已经安装了NodeJS</li><li>已经安装了node-gyp</li></ul><h3 id="安装和使用"><a class="header-anchor" href="#安装和使用">#</a> 安装和使用</h3>',5),A=o('<li>在<code>package.json</code> 中添加依赖项：<div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token comment">// yarn add node-addon-api</span>\n<span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token property">&quot;node-addon-api&quot;</span><span class="token operator">:</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li>在<code>binding.gyp</code> 中添加头文件引用<div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>&#39;include_dirs&#39;<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;&lt;!(node -p \\&quot;require(&#39;node-addon-api&#39;).include_dir\\&quot;)&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li>',2),I=c("在"),P=p("code",null,"binding.gyp",-1),T=c(" 中声明是否启用"),j=p("code",null,"C++",-1),R=c(" 异常功能。因为基本的C-API 不会抛出或者处理C++ 异常，而C++ 包装器却可以选择启用"),X={href:"https://github.com/nodejs/node-addon-api/blob/HEAD/doc/error_handling.md",target:"_blank",rel:"noopener noreferrer"},O=c("此功能"),x=o('<div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>&#39;cflags!&#39;<span class="token operator">:</span> <span class="token punctuation">[</span> &#39;-fno-exceptions&#39; <span class="token punctuation">]</span><span class="token punctuation">,</span>\n&#39;cflags_cc!&#39;<span class="token operator">:</span> <span class="token punctuation">[</span> &#39;-fno-exceptions&#39; <span class="token punctuation">]</span><span class="token punctuation">,</span>\n&#39;xcode_settings&#39;<span class="token operator">:</span> <span class="token punctuation">{</span>\n  &#39;GCC_ENABLE_CPP_EXCEPTIONS&#39;<span class="token operator">:</span> &#39;YES&#39;<span class="token punctuation">,</span>\n  &#39;CLANG_CXX_LIBRARY&#39;<span class="token operator">:</span> &#39;libc++&#39;<span class="token punctuation">,</span>\n  &#39;MACOSX_DEPLOYMENT_TARGET&#39;<span class="token operator">:</span> &#39;<span class="token number">10.7</span>&#39;<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n&#39;msvs_settings&#39;<span class="token operator">:</span> <span class="token punctuation">{</span>\n  &#39;VCCLCompilerTool&#39;<span class="token operator">:</span> <span class="token punctuation">{</span> &#39;ExceptionHandling&#39;<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n# 或者干脆禁用掉此功能  \n&#39;defines&#39;<span class="token operator">:</span> <span class="token punctuation">[</span> &#39;NAPI_DISABLE_CPP_EXCEPTIONS&#39; <span class="token punctuation">]</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>',1),M=o('<li>配置支持<code>OSX</code><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>&#39;conditions&#39;<span class="token operator">:</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">[</span>&#39;OS==<span class="token string">&quot;mac&quot;</span>&#39;<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    &#39;cflags+&#39;<span class="token operator">:</span> <span class="token punctuation">[</span>&#39;-fvisibility=hidden&#39;<span class="token punctuation">]</span><span class="token punctuation">,</span>\n    &#39;xcode_settings&#39;<span class="token operator">:</span> <span class="token punctuation">{</span>\n      &#39;GCC_SYMBOLS_PRIVATE_EXTERN&#39;<span class="token operator">:</span> &#39;YES&#39;<span class="token punctuation">,</span> # -fvisibility=hidden\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li>在项目代码中引入头文件<div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;napi.h&quot;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li>',2),L=o('<p>在构建时，只有当目标节点版本没有内置 Node-API 时，才会使用 Node-API back-compat 库代码。</p><p>预处理器指令<code>NODE_ADDON_API_DISABLE_DEPRECATED</code> 可以在编译时定义，然后包含 <code>napi.h</code> 以跳过不推荐使用的API 的定义。<br> 6. 导入插件，示例中采用<code>node-bindings</code> 库来导入编译好的文件。因为一般编译好的文件会存在于<code>./Release/*</code> 比较深层的目录，比较不好找。</p><h3 id="创建第一个项目"><a class="header-anchor" href="#创建第一个项目">#</a> 创建第一个项目</h3><p>一般我们采用框架来自动生成代码，这里用到了<code>Yoman</code> 和<code>generator-napi-module</code> 两个库</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>npm install <span class="token operator">-</span>g yo\nnpm install <span class="token operator">-</span>g generator<span class="token operator">-</span>napi<span class="token operator">-</span>module\n\n<span class="token comment"># 创建项目文件夹</span>\nmkdir hello<span class="token operator">-</span>world\ncd hello<span class="token operator">-</span>world\nyo napi<span class="token operator">-</span>module\n\n<span class="token comment"># 项目配置选项</span>\npackage name: <span class="token punctuation">(</span>hello<span class="token operator">-</span>world<span class="token punctuation">)</span> \nversion: <span class="token punctuation">(</span>1<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">)</span> \ndescription: A first project<span class="token punctuation">.</span>\ngit repository: \nkeywords: \nauthor: Your name goes here\nlicense: <span class="token punctuation">(</span>ISC<span class="token punctuation">)</span>\nYeoman will display the generated package<span class="token punctuation">.</span>json file here<span class="token punctuation">.</span>\n\n\nIs this OK? <span class="token punctuation">(</span>yes<span class="token punctuation">)</span> yes\n? Choose a template Hello World\n? Would you like to generate TypeScript wrappers <span class="token keyword">for</span> your module? No\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h2 id="相关资料"><a class="header-anchor" href="#相关资料">#</a> 相关资料</h2>',6),z={href:"https://github.com/nodejs/node-addon-examples",target:"_blank",rel:"noopener noreferrer"},C=c("node-addon-examples"),D={href:"https://nodejs.org/docs/latest/api/n-api.html",target:"_blank",rel:"noopener noreferrer"},q=c("C/C++ addons with Node-API"),S={href:"https://github.com/nodejs/node-addon-api",target:"_blank",rel:"noopener noreferrer"},U=c("node-addon-api"),G={href:"https://nodejs.github.io/node-addon-examples/",target:"_blank",rel:"noopener noreferrer"},H=c("Node-API Resource"),J={href:"https://napi.inspiredware.com/getting-started/first.html",target:"_blank",rel:"noopener noreferrer"},W=c("A first project"),Y=c("：主要介绍如何构建一个N-API 项目");l.render=function(o,c){const l=n("CodeGroupItem"),B=n("CodeGroup"),V=n("OutboundLink");return s(),a(e,null,[u,p(B,null,{default:t((()=>[p(l,{title:".node 位宽验证"},{default:t((()=>[i])),_:1})])),_:1}),r,k,p(B,null,{default:t((()=>[p(l,{title:"代码模板"},{default:t((()=>[b])),_:1}),p(l,{title:"状态码"},{default:t((()=>[_])),_:1})])),_:1}),m,p(B,null,{default:t((()=>[p(l,{title:"addon.cc"},{default:t((()=>[v])),_:1}),p(l,{title:"myobject.h"},{default:t((()=>[d])),_:1}),p(l,{title:"myobject.cc"},{default:t((()=>[f])),_:1})])),_:1}),g,p("p",null,[y,p("a",h,[N,p(V)]),E]),w,p("ol",null,[A,p("li",null,[I,P,T,j,R,p("a",X,[O,p(V)]),x]),M]),L,p("ol",null,[p("li",null,[p("a",z,[C,p(V)])]),p("li",null,[p("a",D,[q,p(V)])]),p("li",null,[p("a",S,[U,p(V)])]),p("li",null,[p("a",G,[H,p(V)])]),p("li",null,[p("a",J,[W,p(V)]),Y])])],64)};export default l;
