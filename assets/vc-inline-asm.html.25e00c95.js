import{r as n,o as s,c as a,a as t,w as e,F as c,b as p,d as o}from"./app.988c5f01.js";const l={},r=t("h2",{id:"c-c-互相调用"},[t("a",{class:"header-anchor",href:"#c-c-互相调用"},"#"),p(" C-C++ 互相调用")],-1),u=t("p",null,"虽然C++ 是C 语言的超集，但是二者并不能做到无缝衔接。这里记一下C 和C++是如何以静态链接库的形式调用彼此的。",-1),i=t("div",{class:"language-c ext-c line-numbers-mode"},[t("pre",{class:"language-c"},[t("code",null,[t("span",{class:"token comment"},"// + folder"),p("\n"),t("span",{class:"token comment"},"//     + c_code.c  "),p("\n"),t("span",{class:"token comment"},"//     + cpp_code.cpp  "),p("\n"),t("span",{class:"token comment"},"//     + makefile"),p("\n\n"),t("span",{class:"token comment"},"/***** c_code.c *****/"),p("\n"),t("span",{class:"token keyword"},"int"),p(),t("span",{class:"token function"},"add"),t("span",{class:"token punctuation"},"("),t("span",{class:"token keyword"},"int"),p(" a"),t("span",{class:"token punctuation"},","),p(),t("span",{class:"token keyword"},"int"),p(" b"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},"{"),p("\n    "),t("span",{class:"token keyword"},"return"),p(" a "),t("span",{class:"token operator"},"+"),p(" b"),t("span",{class:"token punctuation"},";"),p("\n"),t("span",{class:"token punctuation"},"}"),p("\n\n"),t("span",{class:"token comment"},"/***** cpp_code.cpp *****/"),p("\n"),t("span",{class:"token macro property"},[t("span",{class:"token directive-hash"},"#"),t("span",{class:"token directive keyword"},"include"),p(),t("span",{class:"token string"},"<iostream>")]),p("\n"),t("span",{class:"token keyword"},"extern"),p(),t("span",{class:"token string"},'"C"'),p(),t("span",{class:"token keyword"},"int"),p(),t("span",{class:"token function"},"add"),t("span",{class:"token punctuation"},"("),t("span",{class:"token keyword"},"int"),p(" a"),t("span",{class:"token punctuation"},","),p(),t("span",{class:"token keyword"},"int"),p(" b"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),p("\n\n"),t("span",{class:"token keyword"},"int"),p(),t("span",{class:"token function"},"main"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},"{"),p("\n    std"),t("span",{class:"token operator"},"::"),p("cout "),t("span",{class:"token operator"},"<<"),p(),t("span",{class:"token function"},"add"),t("span",{class:"token punctuation"},"("),t("span",{class:"token number"},"1"),t("span",{class:"token punctuation"},","),p(),t("span",{class:"token number"},"2"),t("span",{class:"token punctuation"},")"),p(),t("span",{class:"token operator"},"<<"),p(" std"),t("span",{class:"token operator"},"::"),p("endl"),t("span",{class:"token punctuation"},";"),p("\n    "),t("span",{class:"token keyword"},"return"),p(),t("span",{class:"token number"},"0"),t("span",{class:"token punctuation"},";"),p("\n"),t("span",{class:"token punctuation"},"}"),p("\n\n"),t("span",{class:"token comment"},"/** makefile\n * build_c: c_code.c  \n *     gcc -c c_code.c \n * build_cpp: build_c cpp_code.cpp\n *     g++ cpp_code.cpp c_code.o\n */"),p("\n")])]),t("div",{class:"highlight-lines"},[t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("div",{class:"highlight-line"}," "),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br")]),t("div",{class:"line-numbers"},[t("span",{class:"line-number"},"1"),t("br"),t("span",{class:"line-number"},"2"),t("br"),t("span",{class:"line-number"},"3"),t("br"),t("span",{class:"line-number"},"4"),t("br"),t("span",{class:"line-number"},"5"),t("br"),t("span",{class:"line-number"},"6"),t("br"),t("span",{class:"line-number"},"7"),t("br"),t("span",{class:"line-number"},"8"),t("br"),t("span",{class:"line-number"},"9"),t("br"),t("span",{class:"line-number"},"10"),t("br"),t("span",{class:"line-number"},"11"),t("br"),t("span",{class:"line-number"},"12"),t("br"),t("span",{class:"line-number"},"13"),t("br"),t("span",{class:"line-number"},"14"),t("br"),t("span",{class:"line-number"},"15"),t("br"),t("span",{class:"line-number"},"16"),t("br"),t("span",{class:"line-number"},"17"),t("br"),t("span",{class:"line-number"},"18"),t("br"),t("span",{class:"line-number"},"19"),t("br"),t("span",{class:"line-number"},"20"),t("br"),t("span",{class:"line-number"},"21"),t("br"),t("span",{class:"line-number"},"22"),t("br"),t("span",{class:"line-number"},"23"),t("br"),t("span",{class:"line-number"},"24"),t("br"),t("span",{class:"line-number"},"25"),t("br")])],-1),k=t("div",{class:"language-c ext-c line-numbers-mode"},[t("pre",{class:"language-c"},[t("code",null,[t("span",{class:"token comment"},"// + folder"),p("\n"),t("span",{class:"token comment"},"//     + c_code.c  "),p("\n"),t("span",{class:"token comment"},"//     + cpp_code.cpp  "),p("\n"),t("span",{class:"token comment"},"//     + makefile"),p("\n\n"),t("span",{class:"token comment"},"/***** c_code.c *****/"),p("\n"),t("span",{class:"token macro property"},[t("span",{class:"token directive-hash"},"#"),t("span",{class:"token directive keyword"},"include"),p(),t("span",{class:"token string"},"<stdio.h>")]),p("\n"),t("span",{class:"token keyword"},"int"),p(),t("span",{class:"token function"},"sub"),t("span",{class:"token punctuation"},"("),t("span",{class:"token keyword"},"int"),t("span",{class:"token punctuation"},","),p(),t("span",{class:"token keyword"},"int"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),p("\n\n"),t("span",{class:"token keyword"},"int"),p(),t("span",{class:"token function"},"main"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},"{"),p("\n    "),t("span",{class:"token function"},"printf"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"%d\\n"'),t("span",{class:"token punctuation"},","),p(),t("span",{class:"token function"},"sub"),t("span",{class:"token punctuation"},"("),t("span",{class:"token number"},"1"),t("span",{class:"token punctuation"},","),p(),t("span",{class:"token number"},"2"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),p("\n    "),t("span",{class:"token keyword"},"return"),p(),t("span",{class:"token number"},"0"),t("span",{class:"token punctuation"},";"),p("\n"),t("span",{class:"token punctuation"},"}"),p("\n\n"),t("span",{class:"token comment"},"/***** cpp_code.cpp *****/"),p("\n"),t("span",{class:"token keyword"},"extern"),p(),t("span",{class:"token string"},'"C"'),p(),t("span",{class:"token keyword"},"int"),p(),t("span",{class:"token function"},"sub"),t("span",{class:"token punctuation"},"("),t("span",{class:"token keyword"},"int"),p(" a"),t("span",{class:"token punctuation"},","),p(),t("span",{class:"token keyword"},"int"),p(" b"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},"{"),p("\n    "),t("span",{class:"token keyword"},"return"),p(" a "),t("span",{class:"token operator"},"-"),p(" b"),t("span",{class:"token punctuation"},";"),p("\n"),t("span",{class:"token punctuation"},"}"),p("\n\n"),t("span",{class:"token comment"},"/** makefile\n * build_c: build_cpp c_code.c  \n *     gcc c_code.c  *.o\n * build_cpp:  build_c cpp_code.cpp\n *     g++ -c cpp_code.cpp \n */"),p("\n")])]),t("div",{class:"highlight-lines"},[t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("div",{class:"highlight-line"}," "),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br")]),t("div",{class:"line-numbers"},[t("span",{class:"line-number"},"1"),t("br"),t("span",{class:"line-number"},"2"),t("br"),t("span",{class:"line-number"},"3"),t("br"),t("span",{class:"line-number"},"4"),t("br"),t("span",{class:"line-number"},"5"),t("br"),t("span",{class:"line-number"},"6"),t("br"),t("span",{class:"line-number"},"7"),t("br"),t("span",{class:"line-number"},"8"),t("br"),t("span",{class:"line-number"},"9"),t("br"),t("span",{class:"line-number"},"10"),t("br"),t("span",{class:"line-number"},"11"),t("br"),t("span",{class:"line-number"},"12"),t("br"),t("span",{class:"line-number"},"13"),t("br"),t("span",{class:"line-number"},"14"),t("br"),t("span",{class:"line-number"},"15"),t("br"),t("span",{class:"line-number"},"16"),t("br"),t("span",{class:"line-number"},"17"),t("br"),t("span",{class:"line-number"},"18"),t("br"),t("span",{class:"line-number"},"19"),t("br"),t("span",{class:"line-number"},"20"),t("br"),t("span",{class:"line-number"},"21"),t("br"),t("span",{class:"line-number"},"22"),t("br"),t("span",{class:"line-number"},"23"),t("br"),t("span",{class:"line-number"},"24"),t("br"),t("span",{class:"line-number"},"25"),t("br")])],-1),b=t("h3",{id:"c-语言调用c-的成员函数"},[t("a",{class:"header-anchor",href:"#c-语言调用c-的成员函数"},"#"),p(" C 语言调用C++ 的成员函数")],-1),m=t("p",null,"因为C 语言没有对象的概念，所有成员函数都需要写成method(Obj *, int param) 这种形式才行。所以，如果想在C 语言中调用C++ 中的成员函数，则需要提供（手写）一个wrapper，将其转化为C 风格。",-1),d=t("div",{class:"language-c ext-c line-numbers-mode"},[t("pre",{class:"language-c"},[t("code",null,[t("span",{class:"token macro property"},[t("span",{class:"token directive-hash"},"#"),t("span",{class:"token directive keyword"},"include"),p(),t("span",{class:"token string"},"<stdio.h>")]),p("\n\n"),t("span",{class:"token keyword"},"void"),p(),t("span",{class:"token operator"},"*"),t("span",{class:"token function"},"Create"),t("span",{class:"token punctuation"},"("),t("span",{class:"token keyword"},"int"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),p("\n"),t("span",{class:"token keyword"},"int"),p(),t("span",{class:"token function"},"GetAge"),t("span",{class:"token punctuation"},"("),t("span",{class:"token keyword"},"void"),p(),t("span",{class:"token operator"},"*"),p("stu"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),p("\n\n"),t("span",{class:"token keyword"},"int"),p(),t("span",{class:"token function"},"main"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},"{"),p("\n    "),t("span",{class:"token keyword"},"void"),p(),t("span",{class:"token operator"},"*"),p("stu "),t("span",{class:"token operator"},"="),p(),t("span",{class:"token function"},"Create"),t("span",{class:"token punctuation"},"("),t("span",{class:"token number"},"13"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),p("\n    "),t("span",{class:"token function"},"printf"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"%d\\n"'),t("span",{class:"token punctuation"},","),p(),t("span",{class:"token function"},"GetAge"),t("span",{class:"token punctuation"},"("),p("stu"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),p("\n    "),t("span",{class:"token keyword"},"return"),p(),t("span",{class:"token number"},"0"),t("span",{class:"token punctuation"},";"),p("\n"),t("span",{class:"token punctuation"},"}"),p("\n")])]),t("div",{class:"highlight-lines"},[t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("div",{class:"highlight-line"}," "),t("br"),t("br"),t("br")]),t("div",{class:"line-numbers"},[t("span",{class:"line-number"},"1"),t("br"),t("span",{class:"line-number"},"2"),t("br"),t("span",{class:"line-number"},"3"),t("br"),t("span",{class:"line-number"},"4"),t("br"),t("span",{class:"line-number"},"5"),t("br"),t("span",{class:"line-number"},"6"),t("br"),t("span",{class:"line-number"},"7"),t("br"),t("span",{class:"line-number"},"8"),t("br"),t("span",{class:"line-number"},"9"),t("br"),t("span",{class:"line-number"},"10"),t("br")])],-1),g=t("div",{class:"language-c ext-c line-numbers-mode"},[t("pre",{class:"language-c"},[t("code",null,[t("span",{class:"token comment"},"// cpp_code.cpp"),p("\n"),t("span",{class:"token macro property"},[t("span",{class:"token directive-hash"},"#"),t("span",{class:"token directive keyword"},"include"),p(),t("span",{class:"token string"},"<iostream>")]),p("\nusing namespace std"),t("span",{class:"token punctuation"},";"),p("\n\nclass Student"),t("span",{class:"token punctuation"},"{"),p("\npublic"),t("span",{class:"token operator"},":"),p("\n    "),t("span",{class:"token keyword"},"int"),p(" _age"),t("span",{class:"token punctuation"},";"),p("\n    "),t("span",{class:"token function"},"Student"),t("span",{class:"token punctuation"},"("),t("span",{class:"token keyword"},"int"),p(" age"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),p("\n    "),t("span",{class:"token operator"},"~"),t("span",{class:"token function"},"Student"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),p("\n"),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},";"),p("\n\nStudent"),t("span",{class:"token operator"},"::"),t("span",{class:"token function"},"Student"),t("span",{class:"token punctuation"},"("),t("span",{class:"token keyword"},"int"),p(" age"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},"{"),p("\n    this"),t("span",{class:"token operator"},"->"),p("_age "),t("span",{class:"token operator"},"="),p(" age"),t("span",{class:"token punctuation"},";"),p("\n    cout "),t("span",{class:"token operator"},"<<"),p(),t("span",{class:"token string"},'"age: "'),p(),t("span",{class:"token operator"},"<<"),p(" age "),t("span",{class:"token operator"},"<<"),p(" endl"),t("span",{class:"token punctuation"},";"),p("\n"),t("span",{class:"token punctuation"},"}"),p("\n\n"),t("span",{class:"token keyword"},"extern"),p(),t("span",{class:"token string"},'"C"'),p(),t("span",{class:"token keyword"},"void"),p(),t("span",{class:"token operator"},"*"),t("span",{class:"token function"},"Create"),t("span",{class:"token punctuation"},"("),t("span",{class:"token keyword"},"int"),p(" age"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},"{"),p("\n    "),t("span",{class:"token keyword"},"return"),p(" new "),t("span",{class:"token function"},"Student"),t("span",{class:"token punctuation"},"("),p("age"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),p("\n"),t("span",{class:"token punctuation"},"}"),p("\n\n"),t("span",{class:"token keyword"},"extern"),p(),t("span",{class:"token string"},'"C"'),p(),t("span",{class:"token keyword"},"int"),p(),t("span",{class:"token function"},"GetAge"),t("span",{class:"token punctuation"},"("),t("span",{class:"token keyword"},"void"),p(),t("span",{class:"token operator"},"*"),p("stu"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},"{"),p("\n    "),t("span",{class:"token keyword"},"return"),p(),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},"("),p("Student "),t("span",{class:"token operator"},"*"),t("span",{class:"token punctuation"},")"),p("stu"),t("span",{class:"token punctuation"},")"),t("span",{class:"token operator"},"->"),p("_age"),t("span",{class:"token punctuation"},";"),p("\n"),t("span",{class:"token punctuation"},"}"),p("\n\n")])]),t("div",{class:"highlight-lines"},[t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("div",{class:"highlight-line"}," "),t("div",{class:"highlight-line"}," "),t("div",{class:"highlight-line"}," "),t("div",{class:"highlight-line"}," "),t("div",{class:"highlight-line"}," "),t("div",{class:"highlight-line"}," "),t("div",{class:"highlight-line"}," "),t("br")]),t("div",{class:"line-numbers"},[t("span",{class:"line-number"},"1"),t("br"),t("span",{class:"line-number"},"2"),t("br"),t("span",{class:"line-number"},"3"),t("br"),t("span",{class:"line-number"},"4"),t("br"),t("span",{class:"line-number"},"5"),t("br"),t("span",{class:"line-number"},"6"),t("br"),t("span",{class:"line-number"},"7"),t("br"),t("span",{class:"line-number"},"8"),t("br"),t("span",{class:"line-number"},"9"),t("br"),t("span",{class:"line-number"},"10"),t("br"),t("span",{class:"line-number"},"11"),t("br"),t("span",{class:"line-number"},"12"),t("br"),t("span",{class:"line-number"},"13"),t("br"),t("span",{class:"line-number"},"14"),t("br"),t("span",{class:"line-number"},"15"),t("br"),t("span",{class:"line-number"},"16"),t("br"),t("span",{class:"line-number"},"17"),t("br"),t("span",{class:"line-number"},"18"),t("br"),t("span",{class:"line-number"},"19"),t("br"),t("span",{class:"line-number"},"20"),t("br"),t("span",{class:"line-number"},"21"),t("br"),t("span",{class:"line-number"},"22"),t("br"),t("span",{class:"line-number"},"23"),t("br"),t("span",{class:"line-number"},"24"),t("br")])],-1),h=t("div",{class:"language-makefile ext-makefile line-numbers-mode"},[t("pre",{class:"language-makefile"},[t("code",null,[t("span",{class:"token symbol"},"build_cpp"),t("span",{class:"token punctuation"},":"),p(" cpp_code.cpp  \n\tg++ -c cpp_code.cpp  \n\n"),t("span",{class:"token comment"},"# 在编译C++ 类的时候需要添加 -lstdc++ 标记  "),p("\n"),t("span",{class:"token comment"},"# 否则gcc 不能识别C++ 的语法"),p("\n"),t("span",{class:"token symbol"},"build_c"),t("span",{class:"token punctuation"},":"),p(" build_cpp c_code.c  \n\tgcc c_code.c  *.o -lstdc++\n")])]),t("div",{class:"line-numbers"},[t("span",{class:"line-number"},"1"),t("br"),t("span",{class:"line-number"},"2"),t("br"),t("span",{class:"line-number"},"3"),t("br"),t("span",{class:"line-number"},"4"),t("br"),t("span",{class:"line-number"},"5"),t("br"),t("span",{class:"line-number"},"6"),t("br"),t("span",{class:"line-number"},"7"),t("br")])],-1),f=o('<h3 id="函数的重载"><a class="header-anchor" href="#函数的重载">#</a> 函数的重载</h3><p>重载函数同成员函数没有区别，只是需要额外的字符来区分返回值或者参数，一般会用宏命令来自动生成，不多赘述。</p><h2 id="c-语言调用go"><a class="header-anchor" href="#c-语言调用go">#</a> C 语言调用Go</h2><p>在很多专业软件里面会提供C/C++，的接口，但是C 语言的内存管理操作过于复杂。于是想到是否可以通过C 做胶水语言，实际上调用golang 来完成任务。不过golang 导出到C 的数据，也是需要手工回收的，但是只需对接口交换的数据处理一次就够了。</p><h3 id="准备工作"><a class="header-anchor" href="#准备工作">#</a> 准备工作</h3><p>安装Golang、MinGW，这里要注意的是<strong>Golang 与MinGW 的位宽一定要是一致的，否则在编译时会出错</strong>。因为主要是采用动态链接库的形式来调用Go 函数。本文选择的都是64 位的程序。</p><h4 id="变量类型"><a class="header-anchor" href="#变量类型">#</a> 变量类型</h4><p>通过引入<code>C</code> 包，可以使用C 兼容的变量类型。</p><table><thead><tr><th>C</th><th>Golang</th><th>宽度</th></tr></thead><tbody><tr><td>char</td><td>C.char</td><td>byte</td></tr><tr><td>signed char</td><td>C.schar</td><td>int8</td></tr><tr><td>unsigned char</td><td>C.uchar</td><td>uint8</td></tr><tr><td>short int</td><td>C.short</td><td>int16</td></tr><tr><td>short unsigned int</td><td>C.ushort</td><td>uint16</td></tr><tr><td>int</td><td>C.int</td><td>int</td></tr><tr><td>unsigned int</td><td>C.uint</td><td>uint32</td></tr><tr><td>long int</td><td>C.long</td><td>int32 or int64</td></tr><tr><td>long unsigned int</td><td>C.ulong</td><td>uint32 or uint64</td></tr><tr><td>long long int</td><td>C.longlong</td><td>int64</td></tr><tr><td>long long unsigned int</td><td>C.ulonglong</td><td>uint64</td></tr><tr><td>float</td><td>C.float</td><td>float32</td></tr><tr><td>double</td><td>C.double</td><td>float64</td></tr><tr><td>wchar_t</td><td>C.wchar_t</td><td></td></tr><tr><td>void *</td><td>unsafe.Pointer</td><td></td></tr></tbody></table><p>在使用时注意内存的释放:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>cs <span class="token operator">:=</span> C<span class="token punctuation">.</span><span class="token function">CString</span><span class="token punctuation">(</span><span class="token string">&quot;PN&quot;</span><span class="token punctuation">)</span>\n<span class="token comment">// ...</span>\nC<span class="token punctuation">.</span><span class="token function">free</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>cs<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="示例代码"><a class="header-anchor" href="#示例代码">#</a> 示例代码</h3><p>示例包含两个文件：trj.go 和main.c。 需要注意的是，golang 中需要有特殊的注释来声明导出函数。</p>',13),y=t("div",{class:"language-go ext-go line-numbers-mode"},[t("pre",{class:"language-go"},[t("code",null,[t("span",{class:"token keyword"},"package"),p(" main\n\n"),t("span",{class:"token keyword"},"import"),p(),t("span",{class:"token string"},'"C"'),p("\n"),t("span",{class:"token comment"},"// 添加C 库的支持，用于类型转换"),p("\n"),t("span",{class:"token comment"},"// 使用C.free 时，必须按照上面格式引入C 语言的头文件。"),p("\n\n"),t("span",{class:"token keyword"},"import"),p(),t("span",{class:"token punctuation"},"("),p("\n\t"),t("span",{class:"token string"},'"fmt"'),p("\n\t"),t("span",{class:"token string"},'"unsafe"'),p("\n"),t("span",{class:"token punctuation"},")"),p("\n\n"),t("span",{class:"token comment"},"// 下面的注释是必须的，声明该函数会被导出"),p("\n"),t("span",{class:"token comment"},"// export 前后分别必须只有0 个和1 个空格"),p("\n\n"),t("span",{class:"token comment"},"//export PrintBye"),p("\n"),t("span",{class:"token keyword"},"func"),p(),t("span",{class:"token function"},"PrintBye"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),p(),t("span",{class:"token punctuation"},"{"),p("\n\tfmt"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"Println"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"bye"'),t("span",{class:"token punctuation"},")"),p("\n"),t("span",{class:"token punctuation"},"}"),p("\n\n"),t("span",{class:"token comment"},"//export Sum"),p("\n"),t("span",{class:"token keyword"},"func"),p(),t("span",{class:"token function"},"Sum"),t("span",{class:"token punctuation"},"("),p("a C"),t("span",{class:"token punctuation"},"."),t("span",{class:"token builtin"},"int"),t("span",{class:"token punctuation"},","),p(" b C"),t("span",{class:"token punctuation"},"."),t("span",{class:"token builtin"},"int"),t("span",{class:"token punctuation"},")"),p(" C"),t("span",{class:"token punctuation"},"."),t("span",{class:"token builtin"},"int"),p(),t("span",{class:"token punctuation"},"{"),p("\n\t"),t("span",{class:"token keyword"},"return"),p(" a "),t("span",{class:"token operator"},"+"),p(" b\n"),t("span",{class:"token punctuation"},"}"),p("\n\n"),t("span",{class:"token comment"},"//export GetStr"),p("\n"),t("span",{class:"token keyword"},"func"),p(),t("span",{class:"token function"},"GetStr"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),p(),t("span",{class:"token operator"},"*"),p("C"),t("span",{class:"token punctuation"},"."),p("char "),t("span",{class:"token punctuation"},"{"),p("\n\t"),t("span",{class:"token keyword"},"var"),p(" a "),t("span",{class:"token operator"},"="),p(),t("span",{class:"token string"},'"1"'),p("\n\t"),t("span",{class:"token keyword"},"var"),p(" b "),t("span",{class:"token operator"},"="),p(),t("span",{class:"token string"},'"2"'),p("\n\t"),t("span",{class:"token keyword"},"return"),p(" C"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"CString"),t("span",{class:"token punctuation"},"("),p("a "),t("span",{class:"token operator"},"+"),p(" b"),t("span",{class:"token punctuation"},")"),p("\n"),t("span",{class:"token punctuation"},"}"),p("\n\n"),t("span",{class:"token comment"},"//export FreeStr"),p("\n"),t("span",{class:"token keyword"},"func"),p(),t("span",{class:"token function"},"FreeStr"),t("span",{class:"token punctuation"},"("),p("str unsafe"),t("span",{class:"token punctuation"},"."),p("Pointer"),t("span",{class:"token punctuation"},")"),p(),t("span",{class:"token punctuation"},"{"),p("\n\tC"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"free"),t("span",{class:"token punctuation"},"("),p("str"),t("span",{class:"token punctuation"},")"),p("\n"),t("span",{class:"token punctuation"},"}"),p("\n\n"),t("span",{class:"token keyword"},"func"),p(),t("span",{class:"token function"},"main"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),p(),t("span",{class:"token punctuation"},"{"),p("\n    "),t("span",{class:"token comment"},"// main 方法是必须的"),p("\n"),t("span",{class:"token punctuation"},"}"),p("\n")])]),t("div",{class:"highlight-lines"},[t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("div",{class:"highlight-line"}," "),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br")]),t("div",{class:"line-numbers"},[t("span",{class:"line-number"},"1"),t("br"),t("span",{class:"line-number"},"2"),t("br"),t("span",{class:"line-number"},"3"),t("br"),t("span",{class:"line-number"},"4"),t("br"),t("span",{class:"line-number"},"5"),t("br"),t("span",{class:"line-number"},"6"),t("br"),t("span",{class:"line-number"},"7"),t("br"),t("span",{class:"line-number"},"8"),t("br"),t("span",{class:"line-number"},"9"),t("br"),t("span",{class:"line-number"},"10"),t("br"),t("span",{class:"line-number"},"11"),t("br"),t("span",{class:"line-number"},"12"),t("br"),t("span",{class:"line-number"},"13"),t("br"),t("span",{class:"line-number"},"14"),t("br"),t("span",{class:"line-number"},"15"),t("br"),t("span",{class:"line-number"},"16"),t("br"),t("span",{class:"line-number"},"17"),t("br"),t("span",{class:"line-number"},"18"),t("br"),t("span",{class:"line-number"},"19"),t("br"),t("span",{class:"line-number"},"20"),t("br"),t("span",{class:"line-number"},"21"),t("br"),t("span",{class:"line-number"},"22"),t("br"),t("span",{class:"line-number"},"23"),t("br"),t("span",{class:"line-number"},"24"),t("br"),t("span",{class:"line-number"},"25"),t("br"),t("span",{class:"line-number"},"26"),t("br"),t("span",{class:"line-number"},"27"),t("br"),t("span",{class:"line-number"},"28"),t("br"),t("span",{class:"line-number"},"29"),t("br"),t("span",{class:"line-number"},"30"),t("br"),t("span",{class:"line-number"},"31"),t("br"),t("span",{class:"line-number"},"32"),t("br"),t("span",{class:"line-number"},"33"),t("br"),t("span",{class:"line-number"},"34"),t("br"),t("span",{class:"line-number"},"35"),t("br"),t("span",{class:"line-number"},"36"),t("br"),t("span",{class:"line-number"},"37"),t("br"),t("span",{class:"line-number"},"38"),t("br"),t("span",{class:"line-number"},"39"),t("br")])],-1),w=t("div",{class:"language-c ext-c line-numbers-mode"},[t("pre",{class:"language-c"},[t("code",null,[t("span",{class:"token macro property"},[t("span",{class:"token directive-hash"},"#"),t("span",{class:"token directive keyword"},"include"),p(),t("span",{class:"token string"},"<windows.h>")]),p("\n"),t("span",{class:"token macro property"},[t("span",{class:"token directive-hash"},"#"),t("span",{class:"token directive keyword"},"include"),p(),t("span",{class:"token string"},"<stdio.h>")]),p("\n\n"),t("span",{class:"token keyword"},"typedef"),p(),t("span",{class:"token keyword"},"void"),p(),t("span",{class:"token punctuation"},"("),t("span",{class:"token operator"},"*"),p("LPPrintBye"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),p("\n"),t("span",{class:"token keyword"},"typedef"),p(),t("span",{class:"token keyword"},"int"),p(),t("span",{class:"token punctuation"},"("),t("span",{class:"token operator"},"*"),p("Sum"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},"("),t("span",{class:"token keyword"},"int"),t("span",{class:"token punctuation"},","),p(),t("span",{class:"token keyword"},"int"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),p("\n"),t("span",{class:"token keyword"},"typedef"),p(),t("span",{class:"token keyword"},"char"),p(),t("span",{class:"token operator"},"*"),t("span",{class:"token punctuation"},"("),t("span",{class:"token operator"},"*"),p("GetStr"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),p("\n"),t("span",{class:"token keyword"},"typedef"),p(),t("span",{class:"token keyword"},"void"),p(),t("span",{class:"token punctuation"},"("),t("span",{class:"token operator"},"*"),p("FreeStr"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},"("),t("span",{class:"token keyword"},"void"),p(),t("span",{class:"token operator"},"*"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),p("\n\n"),t("span",{class:"token keyword"},"int"),p(),t("span",{class:"token function"},"main"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),p("\n"),t("span",{class:"token punctuation"},"{"),p("\n    HMODULE hTrj "),t("span",{class:"token operator"},"="),p(),t("span",{class:"token function"},"LoadLibrary"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"trj.dll"'),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),p("\n    "),t("span",{class:"token function"},"printf"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"dll addr: %p\\n"'),t("span",{class:"token punctuation"},","),p(" hTrj"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),p("\n    LPPrintBye printBye "),t("span",{class:"token operator"},"="),p(),t("span",{class:"token punctuation"},"("),p("LPPrintBye"),t("span",{class:"token punctuation"},")"),t("span",{class:"token function"},"GetProcAddress"),t("span",{class:"token punctuation"},"("),p("hTrj"),t("span",{class:"token punctuation"},","),p(),t("span",{class:"token string"},'"PrintBye"'),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),p("\n    Sum sum "),t("span",{class:"token operator"},"="),p(),t("span",{class:"token punctuation"},"("),p("Sum"),t("span",{class:"token punctuation"},")"),t("span",{class:"token function"},"GetProcAddress"),t("span",{class:"token punctuation"},"("),p("hTrj"),t("span",{class:"token punctuation"},","),p(),t("span",{class:"token string"},'"Sum"'),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),p("\n    "),t("span",{class:"token function"},"printf"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"Sum addr: %p\\n"'),t("span",{class:"token punctuation"},","),p(" sum"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),p("\n    "),t("span",{class:"token function"},"printf"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"1+2 = %d\\n"'),t("span",{class:"token punctuation"},","),p(),t("span",{class:"token function"},"sum"),t("span",{class:"token punctuation"},"("),t("span",{class:"token number"},"1"),t("span",{class:"token punctuation"},","),p(),t("span",{class:"token number"},"2"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),p("\n    GetStr getStr "),t("span",{class:"token operator"},"="),p(),t("span",{class:"token punctuation"},"("),p("GetStr"),t("span",{class:"token punctuation"},")"),t("span",{class:"token function"},"GetProcAddress"),t("span",{class:"token punctuation"},"("),p("hTrj"),t("span",{class:"token punctuation"},","),p(),t("span",{class:"token string"},'"GetStr"'),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),p("\n    "),t("span",{class:"token function"},"printf"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"GetStr addr: %p\\n"'),t("span",{class:"token punctuation"},","),p(" getStr"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),p("\n    "),t("span",{class:"token keyword"},"char"),p(),t("span",{class:"token operator"},"*"),p("str "),t("span",{class:"token operator"},"="),p(),t("span",{class:"token function"},"getStr"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),p("\n    "),t("span",{class:"token function"},"printf"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"str = %p\\n"'),t("span",{class:"token punctuation"},","),p(" str"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),p("\n    "),t("span",{class:"token function"},"printf"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"str addr: %s\\n"'),t("span",{class:"token punctuation"},","),p(" str"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),p("\n\n    FreeStr freeStr "),t("span",{class:"token operator"},"="),p(),t("span",{class:"token punctuation"},"("),p("FreeStr"),t("span",{class:"token punctuation"},")"),t("span",{class:"token function"},"GetProcAddress"),t("span",{class:"token punctuation"},"("),p("hTrj"),t("span",{class:"token punctuation"},","),p(),t("span",{class:"token string"},'"FreeStr"'),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),p("\n    "),t("span",{class:"token function"},"printf"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"FreeStr addr: %p\\n"'),t("span",{class:"token punctuation"},","),p(" freeStr"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),p("\n    "),t("span",{class:"token function"},"freeStr"),t("span",{class:"token punctuation"},"("),p("str"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),p("\n    \n    "),t("span",{class:"token comment"},"// 注意这里字符串已经被回收了，但是指针的指向还没变"),p("\n    "),t("span",{class:"token function"},"printf"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"----- free str -----\\n"'),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),p("\n    "),t("span",{class:"token function"},"printf"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"str = %p\\n"'),t("span",{class:"token punctuation"},","),p(" str"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),p("\n    "),t("span",{class:"token function"},"printf"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"str addr: %s\\n"'),t("span",{class:"token punctuation"},","),p(" str"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),p("\n    str "),t("span",{class:"token operator"},"="),p(),t("span",{class:"token constant"},"NULL"),t("span",{class:"token punctuation"},";"),p(),t("span",{class:"token comment"},"// 指针指向安全位置"),p("\n\n    "),t("span",{class:"token function"},"printBye"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),p("\n    "),t("span",{class:"token function"},"FreeLibrary"),t("span",{class:"token punctuation"},"("),p("hTrj"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),p("\n    "),t("span",{class:"token keyword"},"return"),p(),t("span",{class:"token number"},"0"),t("span",{class:"token punctuation"},";"),p("\n"),t("span",{class:"token punctuation"},"}"),p("\n")])]),t("div",{class:"line-numbers"},[t("span",{class:"line-number"},"1"),t("br"),t("span",{class:"line-number"},"2"),t("br"),t("span",{class:"line-number"},"3"),t("br"),t("span",{class:"line-number"},"4"),t("br"),t("span",{class:"line-number"},"5"),t("br"),t("span",{class:"line-number"},"6"),t("br"),t("span",{class:"line-number"},"7"),t("br"),t("span",{class:"line-number"},"8"),t("br"),t("span",{class:"line-number"},"9"),t("br"),t("span",{class:"line-number"},"10"),t("br"),t("span",{class:"line-number"},"11"),t("br"),t("span",{class:"line-number"},"12"),t("br"),t("span",{class:"line-number"},"13"),t("br"),t("span",{class:"line-number"},"14"),t("br"),t("span",{class:"line-number"},"15"),t("br"),t("span",{class:"line-number"},"16"),t("br"),t("span",{class:"line-number"},"17"),t("br"),t("span",{class:"line-number"},"18"),t("br"),t("span",{class:"line-number"},"19"),t("br"),t("span",{class:"line-number"},"20"),t("br"),t("span",{class:"line-number"},"21"),t("br"),t("span",{class:"line-number"},"22"),t("br"),t("span",{class:"line-number"},"23"),t("br"),t("span",{class:"line-number"},"24"),t("br"),t("span",{class:"line-number"},"25"),t("br"),t("span",{class:"line-number"},"26"),t("br"),t("span",{class:"line-number"},"27"),t("br"),t("span",{class:"line-number"},"28"),t("br"),t("span",{class:"line-number"},"29"),t("br"),t("span",{class:"line-number"},"30"),t("br"),t("span",{class:"line-number"},"31"),t("br"),t("span",{class:"line-number"},"32"),t("br"),t("span",{class:"line-number"},"33"),t("br"),t("span",{class:"line-number"},"34"),t("br"),t("span",{class:"line-number"},"35"),t("br"),t("span",{class:"line-number"},"36"),t("br")])],-1),_=t("div",{class:"language-bash ext-sh line-numbers-mode"},[t("pre",{class:"language-bash"},[t("code",null,[t("span",{class:"token comment"},"# 编译命令很简单，编译后会产生.dll 和.h 两个文件"),p("\ngo build -ldflags "),t("span",{class:"token string"},'"-s -w"'),p(" -buildmode"),t("span",{class:"token operator"},"="),p("c-shared -o trj.dll trj.go  \n"),t("span",{class:"token comment"},"# -s, -w 用于减小动态链接库的体积  "),p("\n"),t("span",{class:"token comment"},"# -s 压缩  "),p("\n"),t("span",{class:"token comment"},"# -w 去掉调试信息  "),p("\n\n"),t("span",{class:"token comment"},"# 但是一般用更简单的命令 "),p("\ngo build -buildmode"),t("span",{class:"token operator"},"="),p("c-shared -o trj.dll trj.go\n\n"),t("span",{class:"token comment"},"# 当然，也可以生成静态链接库文件  "),p("\ngo build -buildmode"),t("span",{class:"token operator"},"="),p("c-archive trj.go    \n"),t("span",{class:"token comment"},"# 此命令会生成`.a` 和`.h` 文件"),p("\n\ngcc ."),t("span",{class:"token punctuation"},"\\"),p("main.c  \n."),t("span",{class:"token punctuation"},"\\"),p("a.exe "),t("span",{class:"token comment"},"# 即可看到执行的结果  "),p("\n")])]),t("div",{class:"line-numbers"},[t("span",{class:"line-number"},"1"),t("br"),t("span",{class:"line-number"},"2"),t("br"),t("span",{class:"line-number"},"3"),t("br"),t("span",{class:"line-number"},"4"),t("br"),t("span",{class:"line-number"},"5"),t("br"),t("span",{class:"line-number"},"6"),t("br"),t("span",{class:"line-number"},"7"),t("br"),t("span",{class:"line-number"},"8"),t("br"),t("span",{class:"line-number"},"9"),t("br"),t("span",{class:"line-number"},"10"),t("br"),t("span",{class:"line-number"},"11"),t("br"),t("span",{class:"line-number"},"12"),t("br"),t("span",{class:"line-number"},"13"),t("br"),t("span",{class:"line-number"},"14"),t("br"),t("span",{class:"line-number"},"15"),t("br")])],-1),v=t("h2",{id:"vc-内联汇编"},[t("a",{class:"header-anchor",href:"#vc-内联汇编"},"#"),p(" VC 内联汇编")],-1),C=p("在Windows 下开发"),S=p("N-API"),x=p("插件时，有时候会遇到回调函数的问题。WIN32 的API 给约定好了回调函数传递的参数类型和数量。如果我们需要添加额外的参数时，应该怎么办呢？"),L=o('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 为方便理解，以JS 代替C 来做说明  </span>\n<span class="token constant">BOOL</span> <span class="token function">EnumWindows</span><span class="token punctuation">(</span>\n  <span class="token constant">WNDENUMPROC</span> lpEnumFunc<span class="token punctuation">,</span>  <span class="token comment">// 回调函数lpEnumFunc 接受两个参数</span>\n  <span class="token comment">// BOOL CALLBACK EnumWindowsProc(_In_ HWND hwnd, _In_ LPARAM lParam);</span>\n  <span class="token constant">LPARAM</span>      lParam\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n<span class="token comment">// 下面是JS 演示的闭包的用法  </span>\n<span class="token keyword">function</span> <span class="token function">closure</span><span class="token punctuation">(</span><span class="token parameter">int a</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// 返回一个函数</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">_In_ <span class="token constant">HWND</span> hwnd<span class="token punctuation">,</span> _In_ <span class="token constant">LPARAM</span> lParam</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n        a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token comment">// 函数内部可以访问外层函数的局部变量</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">EnumWindows</span><span class="token punctuation">(</span><span class="token function">closure</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 传递生成的回调函数</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div>',1),P=p("可惜的是，这种混合风格的代码在C 语言中并未得到支持。而网络上比较流行的关于C 语言实现闭包的方法是通过"),A={href:"https://github.com/libffi/libffi",target:"_blank",rel:"noopener noreferrer"},D=p("libffi"),G=p(" 来实现，本质上是通过汇编语言，按照不同平台下的函数调用约定来动态构造函数。在谷歌了许久之后，发现网络上并没有很易懂的原理说明，遂放弃继续研究，因为看别人写的源码实在是太麻烦了，尤其是汇编语言。不得不说，汇编似乎是唯一的选择，而我们知道许多C 编译器都支持内联汇编，那我们能不能通过内联汇编来实现我们的需求呢？"),j=o('<h3 id="函数调用约定"><a class="header-anchor" href="#函数调用约定">#</a> 函数调用约定</h3><p>函数的调用约定主要是函数参数传递的约定，例如在x86 VC中，函数传递参数的方式如下：</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// 代码取自官方文档：</span>\n<span class="token comment">// https://docs.microsoft.com/zh-cn/cpp/assembler/inline/calling-c-functions-in-inline-assembly?view=msvc-160</span>\n<span class="token comment">// InlineAssembler_Calling_C_Functions_in_Inline_Assembly.cpp</span>\n<span class="token comment">// processor: x86</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>\n\n<span class="token keyword">char</span> format<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;%s %s\\n&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">char</span> hello<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">char</span> world<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// printf( format, hello, world );</span>\n   __asm\n   <span class="token punctuation">{</span>\n      mov  eax<span class="token punctuation">,</span> offset world  <span class="token comment">// 参数从右至左依次压栈</span>\n      push eax\n      mov  eax<span class="token punctuation">,</span> offset hello\n      push eax\n      mov  eax<span class="token punctuation">,</span> offset format\n      push eax\n      call printf            <span class="token comment">// 调用函数</span>\n      <span class="token comment">//clean up the stack so that main can exit cleanly</span>\n      <span class="token comment">//use the unused register ebx to do the cleanup</span>\n                             <span class="token comment">// 函数调用之后参数出栈，使得堆栈平衡</span>\n      pop  ebx\n      pop  ebx\n      pop  ebx\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>那我们很容易想到，在调用函数之前，我们提前将某些参数放入堆栈，然后再在函数体中取得这些参数，不就可以不受函数签名的限制了嘛？事实证明，这么做是可行的，只是稍微有些麻烦。</p><h3 id="简易实现"><a class="header-anchor" href="#简易实现">#</a> 简易实现</h3><p>为了减少其他因素的影响，这里推荐使用VS 来开发调试，因为VS 调试时支持查看汇编代码，这样会方便不少，而且不需要配置编译器环境等信息。</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>\n\n<span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t__asm <span class="token punctuation">{</span>\n\t    <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token comment">// 3. 在汇编语言中获取参数，可以直接将形参名当作地址用</span>\n        <span class="token comment">// 函数内部的局部变量应该都可以通过这种方式获取</span>\n\t\tmov eax<span class="token punctuation">,</span> dword ptr<span class="token punctuation">[</span>a <span class="token operator">+</span> <span class="token number">0x04</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 4. 取得我们手动压入的参数</span>\n                                       <span class="token comment">// 这里有意思的一点就是，我们手动压入的参数地址都大于第一个形参</span>\n\t\tmov dword ptr<span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token punctuation">,</span> eax<span class="token punctuation">;</span>       <span class="token comment">// 5. 因为内存间不能直接赋值，我们采用eax 作为中转</span>\n                                       <span class="token comment">// 不用担心eax 受到污染，因为我们的代码是在函数最前面的</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token comment">// 似乎只要变量未使用，就不会提前占用寄存器</span>\n\t<span class="token keyword">return</span> a <span class="token operator">+</span> val<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n\t__asm push dword ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 1. 手动压入参数</span>\n\t<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 2. 调用函数</span>\n\t__asm add esp<span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">;</span>      <span class="token comment">// 6. 平衡堆栈，即恢复原先的栈顶指针，也可以用pop 指令</span>\n\t<span class="token keyword">return</span> a<span class="token punctuation">;</span>                 <span class="token comment">// 7. 这里a 等于8，验证我们的想法是正确的</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// y由上述代码，也可以看出，VC 内联汇编主要有两种方式：  </span>\n<span class="token comment">// 1. __asm 单条汇编指令  </span>\n<span class="token comment">// 2. __asm{ 汇编代码块 }  </span>\n<span class="token comment">// 而在汇编语言中要取得C 代码中的变量，也是非常简单，dword ptr[a] 就可以得到数值了   </span>\n<span class="token comment">// 需要注意的是，针对不同的目标平台，有不同的调用约定，这里只针对于x86 Windows</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h2 id="mingw-相关"><a class="header-anchor" href="#mingw-相关">#</a> Mingw 相关</h2><h3 id="开发dll"><a class="header-anchor" href="#开发dll">#</a> 开发dll</h3><p>在mingw 下生成dll 文件很简单。</p>',10),O=t("div",{class:"language-c ext-c line-numbers-mode"},[t("pre",{class:"language-c"},[t("code",null,[t("span",{class:"token comment"},"// my_dll.c  "),p("\n"),t("span",{class:"token macro property"},[t("span",{class:"token directive-hash"},"#"),t("span",{class:"token directive keyword"},"include"),t("span",{class:"token string"},"<windows.h>")]),p("\n"),t("span",{class:"token macro property"},[t("span",{class:"token directive-hash"},"#"),t("span",{class:"token directive keyword"},"include"),t("span",{class:"token string"},"<stdio.h>")]),p("\n\n"),t("span",{class:"token keyword"},"int"),p(),t("span",{class:"token function"},"add"),t("span",{class:"token punctuation"},"("),t("span",{class:"token keyword"},"int"),p(" a"),t("span",{class:"token punctuation"},","),p(),t("span",{class:"token keyword"},"int"),p(" b"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},"{"),p("\n    "),t("span",{class:"token keyword"},"return"),p(" a"),t("span",{class:"token operator"},"+"),p("b"),t("span",{class:"token punctuation"},";"),p("\n"),t("span",{class:"token punctuation"},"}"),p("  \n\n"),t("span",{class:"token comment"},"// dll 入口函数"),p("\nBOOL APIENTRY "),t("span",{class:"token function"},"DllMain"),t("span",{class:"token punctuation"},"("),p(" \n    HMODULE hModule"),t("span",{class:"token punctuation"},","),p("\n    DWORD  ul_reason_for_call"),t("span",{class:"token punctuation"},","),p("\n    LPVOID lpReserved"),t("span",{class:"token punctuation"},")"),p("\n"),t("span",{class:"token punctuation"},"{"),p("\n    "),t("span",{class:"token function"},"printf"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"my_dll is loaded\\n"'),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),p("\n    "),t("span",{class:"token keyword"},"return"),p(" TRUE"),t("span",{class:"token punctuation"},";"),p("\n"),t("span",{class:"token punctuation"},"}"),p("\n"),t("span",{class:"token comment"},"// 执行`gcc ./my_dll.c -shared -o my_dll.dll`，"),p("\n"),t("span",{class:"token comment"},"// 将会在当前目录生成生成`my_dll.dll`。  "),p("\n")])]),t("div",{class:"line-numbers"},[t("span",{class:"line-number"},"1"),t("br"),t("span",{class:"line-number"},"2"),t("br"),t("span",{class:"line-number"},"3"),t("br"),t("span",{class:"line-number"},"4"),t("br"),t("span",{class:"line-number"},"5"),t("br"),t("span",{class:"line-number"},"6"),t("br"),t("span",{class:"line-number"},"7"),t("br"),t("span",{class:"line-number"},"8"),t("br"),t("span",{class:"line-number"},"9"),t("br"),t("span",{class:"line-number"},"10"),t("br"),t("span",{class:"line-number"},"11"),t("br"),t("span",{class:"line-number"},"12"),t("br"),t("span",{class:"line-number"},"13"),t("br"),t("span",{class:"line-number"},"14"),t("br"),t("span",{class:"line-number"},"15"),t("br"),t("span",{class:"line-number"},"16"),t("br"),t("span",{class:"line-number"},"17"),t("br"),t("span",{class:"line-number"},"18"),t("br"),t("span",{class:"line-number"},"19"),t("br")])],-1),E=t("div",{class:"language-c ext-c line-numbers-mode"},[t("pre",{class:"language-c"},[t("code",null,[t("span",{class:"token macro property"},[t("span",{class:"token directive-hash"},"#"),t("span",{class:"token directive keyword"},"include"),p(),t("span",{class:"token string"},"<windows.h>")]),p("\n"),t("span",{class:"token macro property"},[t("span",{class:"token directive-hash"},"#"),t("span",{class:"token directive keyword"},"include"),t("span",{class:"token string"},"<stdio.h>")]),p("\n\n"),t("span",{class:"token keyword"},"typedef"),p(),t("span",{class:"token keyword"},"int"),p(),t("span",{class:"token punctuation"},"("),t("span",{class:"token operator"},"*"),p("Add"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},"("),t("span",{class:"token keyword"},"int"),p(),t("span",{class:"token punctuation"},","),t("span",{class:"token keyword"},"int"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),p("  "),t("span",{class:"token comment"},"// 定义函数指针类型"),p("\n\n"),t("span",{class:"token keyword"},"int"),p(),t("span",{class:"token function"},"main"),t("span",{class:"token punctuation"},"("),t("span",{class:"token keyword"},"void"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},"{"),p("\n    HMODULE hDll "),t("span",{class:"token operator"},"="),p(),t("span",{class:"token function"},"LoadLibrary"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"my_dll.dll"'),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),p("\n    "),t("span",{class:"token keyword"},"if"),p(),t("span",{class:"token punctuation"},"("),p("hDll "),t("span",{class:"token operator"},"!="),p(),t("span",{class:"token constant"},"NULL"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},"{"),p("\n        "),t("span",{class:"token comment"},"// 从my_dll.dll 中取得函数  "),p("\n        Add add "),t("span",{class:"token operator"},"="),p(),t("span",{class:"token punctuation"},"("),p("Add"),t("span",{class:"token punctuation"},")"),t("span",{class:"token function"},"GetProcAddress"),t("span",{class:"token punctuation"},"("),p("hDll"),t("span",{class:"token punctuation"},","),p(),t("span",{class:"token string"},'"add"'),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),p("  \n\n        "),t("span",{class:"token keyword"},"if"),p(),t("span",{class:"token punctuation"},"("),p("add "),t("span",{class:"token operator"},"!="),p(),t("span",{class:"token constant"},"NULL"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},"{"),p("  "),t("span",{class:"token comment"},"// 执行函数"),p("\n            "),t("span",{class:"token function"},"printf"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"a+b=%d\\n"'),t("span",{class:"token punctuation"},","),t("span",{class:"token function"},"add"),t("span",{class:"token punctuation"},"("),p("a"),t("span",{class:"token punctuation"},","),p("b"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),p("  \n        "),t("span",{class:"token punctuation"},"}"),p("\n\n        "),t("span",{class:"token function"},"FreeLibrary"),t("span",{class:"token punctuation"},"("),p("hDll"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),p("  "),t("span",{class:"token comment"},"// 释放my_dll.dll"),p("\n    "),t("span",{class:"token punctuation"},"}"),p("\n"),t("span",{class:"token punctuation"},"}"),p("\n")])]),t("div",{class:"highlight-lines"},[t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("div",{class:"highlight-line"}," "),t("br"),t("br")]),t("div",{class:"line-numbers"},[t("span",{class:"line-number"},"1"),t("br"),t("span",{class:"line-number"},"2"),t("br"),t("span",{class:"line-number"},"3"),t("br"),t("span",{class:"line-number"},"4"),t("br"),t("span",{class:"line-number"},"5"),t("br"),t("span",{class:"line-number"},"6"),t("br"),t("span",{class:"line-number"},"7"),t("br"),t("span",{class:"line-number"},"8"),t("br"),t("span",{class:"line-number"},"9"),t("br"),t("span",{class:"line-number"},"10"),t("br"),t("span",{class:"line-number"},"11"),t("br"),t("span",{class:"line-number"},"12"),t("br"),t("span",{class:"line-number"},"13"),t("br"),t("span",{class:"line-number"},"14"),t("br"),t("span",{class:"line-number"},"15"),t("br"),t("span",{class:"line-number"},"16"),t("br"),t("span",{class:"line-number"},"17"),t("br"),t("span",{class:"line-number"},"18"),t("br")])],-1),T=t("div",{class:"language-c ext-c line-numbers-mode"},[t("pre",{class:"language-c"},[t("code",null,[p("BOOL APIENTRY "),t("span",{class:"token function"},"DllMain"),t("span",{class:"token punctuation"},"("),p(" \n    HMODULE hModule"),t("span",{class:"token punctuation"},","),p("  "),t("span",{class:"token comment"},"// 指向dll 本身的句柄"),p("\n    DWORD  ul_reason_for_call"),t("span",{class:"token punctuation"},","),p("  "),t("span",{class:"token comment"},"// 被调用的原因(触发事件)"),p("\n    LPVOID lpReserved  "),t("span",{class:"token comment"},"// 保留参数，无意义  "),p("\n    "),t("span",{class:"token punctuation"},")"),p("\n"),t("span",{class:"token punctuation"},"{"),p("\n    "),t("span",{class:"token comment"},"// DWORD  ul_reason_for_call"),p("\n    "),t("span",{class:"token keyword"},"switch"),t("span",{class:"token punctuation"},"("),p("ul_reason_for_call"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},"{"),p("\n        "),t("span",{class:"token keyword"},"case"),p(" DLL_PROCESS_ATTACH"),t("span",{class:"token operator"},":"),p(),t("span",{class:"token keyword"},"break"),t("span",{class:"token punctuation"},";"),p("  "),t("span",{class:"token comment"},"// dll 第一次被进程加载"),p("\n        "),t("span",{class:"token keyword"},"case"),p(" DLL_PROCESS_DETACH"),t("span",{class:"token operator"},":"),p(),t("span",{class:"token keyword"},"break"),t("span",{class:"token punctuation"},";"),p("  "),t("span",{class:"token comment"},"// 释放dll "),p("\n        "),t("span",{class:"token keyword"},"case"),p(" DLL_THREAD_ATTACH"),t("span",{class:"token operator"},":"),p(),t("span",{class:"token keyword"},"break"),t("span",{class:"token punctuation"},";"),p("   "),t("span",{class:"token comment"},"// 当进程创建线程时"),p("\n        "),t("span",{class:"token keyword"},"case"),p(" DLL_THREAD_DETACH"),t("span",{class:"token operator"},":"),p(),t("span",{class:"token keyword"},"break"),t("span",{class:"token punctuation"},";"),p("   "),t("span",{class:"token comment"},"// 当进程销毁线程时"),p("\n    "),t("span",{class:"token punctuation"},"}"),p("\n    "),t("span",{class:"token keyword"},"return"),p(" TRUE"),t("span",{class:"token punctuation"},";"),p("\n"),t("span",{class:"token punctuation"},"}"),p("\n")])]),t("div",{class:"highlight-lines"},[t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br")]),t("div",{class:"line-numbers"},[t("span",{class:"line-number"},"1"),t("br"),t("span",{class:"line-number"},"2"),t("br"),t("span",{class:"line-number"},"3"),t("br"),t("span",{class:"line-number"},"4"),t("br"),t("span",{class:"line-number"},"5"),t("br"),t("span",{class:"line-number"},"6"),t("br"),t("span",{class:"line-number"},"7"),t("br"),t("span",{class:"line-number"},"8"),t("br"),t("span",{class:"line-number"},"9"),t("br"),t("span",{class:"line-number"},"10"),t("br"),t("span",{class:"line-number"},"11"),t("br"),t("span",{class:"line-number"},"12"),t("br"),t("span",{class:"line-number"},"13"),t("br"),t("span",{class:"line-number"},"14"),t("br"),t("span",{class:"line-number"},"15"),t("br")])],-1),R=t("h2",{id:"参考阅读"},[t("a",{class:"header-anchor",href:"#参考阅读"},"#"),p(" 参考阅读")],-1),B=t("h3",{id:"c-cpp-相关"},[t("a",{class:"header-anchor",href:"#c-cpp-相关"},"#"),p(" C-Cpp 相关")],-1),W={href:"https://stroustrup.com/bs_faq2.html#callCpp",target:"_blank",rel:"noopener noreferrer"},F=p("Bjarne Stroustrup's C++ Style and Technique FAQ"),M={href:"https://stackoverflow.com/questions/27390078/gcc-compiling-c-code-undefined-reference-to-operator-newunsigned-long-lon",target:"_blank",rel:"noopener noreferrer"},I=p("gcc compiling C++ code: undefined reference to 'operator new...'"),H=t("h3",{id:"go-相关"},[t("a",{class:"header-anchor",href:"#go-相关"},"#"),p(" Go 相关")],-1),q={href:"https://studygolang.com/articles/6798",target:"_blank",rel:"noopener noreferrer"},N=p("Go和C类型对应关系"),U={href:"https://www.cnblogs.com/adjk/p/9469845.html",target:"_blank",rel:"noopener noreferrer"},V=p("golang之cgo一---go与C基本类型转换"),z={href:"https://my.oschina.net/u/1431106/blog/188646?p=%7B%7BcurrentPage-1%7D%7D",target:"_blank",rel:"noopener noreferrer"},J=p("golang C.CString 必须Free"),K={href:"https://www.cnblogs.com/Kingram/p/12088087.html",target:"_blank",rel:"noopener noreferrer"},Y=p("Golang编写Windows动态链接库(DLL)及C调用范例"),Q={href:"https://www.cnblogs.com/zhance/p/10135142.html",target:"_blank",rel:"noopener noreferrer"},X=p("golang —— 语言交互性"),Z=t("h3",{id:"vc-内联汇编-1"},[t("a",{class:"header-anchor",href:"#vc-内联汇编-1"},"#"),p(" VC 内联汇编")],-1),$={href:"https://stackoverflow.com/questions/4024492/can-anyone-help-me-interpret-this-simple-disassembly-from-windbg",target:"_blank",rel:"noopener noreferrer"},nn=p("Can anyone help me interpret this simple disassembly from WinDbg?");l.render=function(p,o){const l=n("CodeGroupItem"),sn=n("CodeGroup"),an=n("RouterLink"),tn=n("OutboundLink");return s(),a(c,null,[r,u,t(sn,null,{default:e((()=>[t(l,{title:"C++ 调用C"},{default:e((()=>[i])),_:1}),t(l,{title:"C 调用C++"},{default:e((()=>[k])),_:1})])),_:1}),b,m,t(sn,null,{default:e((()=>[t(l,{title:"C 代码"},{default:e((()=>[d])),_:1}),t(l,{title:"C++ 类"},{default:e((()=>[g])),_:1}),t(l,{title:"makefile"},{default:e((()=>[h])),_:1})])),_:1}),f,t(sn,null,{default:e((()=>[t(l,{title:"trj.go"},{default:e((()=>[y])),_:1}),t(l,{title:"main.c"},{default:e((()=>[w])),_:1}),t(l,{title:"编译执行"},{default:e((()=>[_])),_:1})])),_:1}),v,t("p",null,[C,t(an,{to:"/nodejs/n-api.html"},{default:e((()=>[S])),_:1}),x]),L,t("p",null,[P,t("a",A,[D,t(tn)]),G]),j,t(sn,null,{default:e((()=>[t(l,{title:"开发"},{default:e((()=>[O])),_:1}),t(l,{title:"调用"},{default:e((()=>[E])),_:1}),t(l,{title:"入口函数"},{default:e((()=>[T])),_:1})])),_:1}),R,B,t("ol",null,[t("li",null,[t("a",W,[F,t(tn)])]),t("li",null,[t("a",M,[I,t(tn)])])]),H,t("ol",null,[t("li",null,[t("a",q,[N,t(tn)])]),t("li",null,[t("a",U,[V,t(tn)])]),t("li",null,[t("a",z,[J,t(tn)])]),t("li",null,[t("a",K,[Y,t(tn)])]),t("li",null,[t("a",Q,[X,t(tn)])])]),Z,t("ol",null,[t("li",null,[t("a",$,[nn,t(tn)])])])],64)};export default l;
