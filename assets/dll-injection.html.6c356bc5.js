import{r as n,o as s,c as a,a as p,w as t,F as e,b as o,d as c}from"./app.988c5f01.js";const l={},r=p("h2",{id:"远程线程注入"},[p("a",{class:"header-anchor",href:"#远程线程注入"},"#"),o(" 远程线程注入")],-1),u=o("文中代码多摘自"),i={href:"https://www.cnblogs.com/DarkBright/p/10820582.html",target:"_blank",rel:"noopener noreferrer"},k=o("Win32创建远程线程"),b=o("，仅作部分注释"),m=p("div",{class:"language-c ext-c line-numbers-mode"},[p("pre",{class:"language-c"},[p("code",null,[p("span",{class:"token macro property"},[p("span",{class:"token directive-hash"},"#"),p("span",{class:"token directive keyword"},"include"),o(),p("span",{class:"token string"},"<windows.h>")]),o("\n"),p("span",{class:"token macro property"},[p("span",{class:"token directive-hash"},"#"),p("span",{class:"token directive keyword"},"include"),o(),p("span",{class:"token string"},"<stdio.h>")]),o("\n\n"),p("span",{class:"token keyword"},"void"),o(),p("span",{class:"token function"},"Fun"),p("span",{class:"token punctuation"},"("),p("span",{class:"token keyword"},"void"),p("span",{class:"token punctuation"},")"),o("\n"),p("span",{class:"token punctuation"},"{"),o("\n    "),p("span",{class:"token keyword"},"for"),p("span",{class:"token punctuation"},"("),p("span",{class:"token class-name"},"size_t"),o(" i "),p("span",{class:"token operator"},"="),o(),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},";"),o(" i "),p("span",{class:"token operator"},"<"),o(),p("span",{class:"token number"},"10"),p("span",{class:"token punctuation"},";"),o(" i"),p("span",{class:"token operator"},"++"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},"{"),o("\n        "),p("span",{class:"token comment"},"// 打印函数地址"),o("\n        "),p("span",{class:"token comment"},"// __FUNCTION__: 获取函数名"),o("\n        "),p("span",{class:"token comment"},"// __FILE__: 获取文件名"),o("\n        "),p("span",{class:"token comment"},"// __LINE__: 获取行号"),o("\n        "),p("span",{class:"token function"},"printf"),p("span",{class:"token punctuation"},"("),p("span",{class:"token string"},'"%s addr:0x%p\\r\\n"'),p("span",{class:"token punctuation"},","),o(" __FUNCTION__"),p("span",{class:"token punctuation"},","),o(" Fun"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),o("\n    "),p("span",{class:"token punctuation"},"}"),o("         \n"),p("span",{class:"token punctuation"},"}"),o("\n\n"),p("span",{class:"token keyword"},"int"),o(),p("span",{class:"token function"},"main"),p("span",{class:"token punctuation"},"("),p("span",{class:"token keyword"},"int"),o(" argc"),p("span",{class:"token punctuation"},","),o(),p("span",{class:"token keyword"},"char"),p("span",{class:"token operator"},"*"),o(" argv"),p("span",{class:"token punctuation"},"["),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},")"),o("\n"),p("span",{class:"token punctuation"},"{"),o("\n    "),p("span",{class:"token function"},"Fun"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),o("\n    "),p("span",{class:"token comment"},'//MessageBox(NULL, TEXT("执行完成!"), TEXT("提示"), MB_OK);'),o("\n\n    "),p("span",{class:"token function"},"getchar"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),o("  "),p("span",{class:"token comment"},"// 暂停"),o("\n    "),p("span",{class:"token keyword"},"return"),o(),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},";"),o("\n"),p("span",{class:"token punctuation"},"}"),o("\n")])]),p("div",{class:"line-numbers"},[p("span",{class:"line-number"},"1"),p("br"),p("span",{class:"line-number"},"2"),p("br"),p("span",{class:"line-number"},"3"),p("br"),p("span",{class:"line-number"},"4"),p("br"),p("span",{class:"line-number"},"5"),p("br"),p("span",{class:"line-number"},"6"),p("br"),p("span",{class:"line-number"},"7"),p("br"),p("span",{class:"line-number"},"8"),p("br"),p("span",{class:"line-number"},"9"),p("br"),p("span",{class:"line-number"},"10"),p("br"),p("span",{class:"line-number"},"11"),p("br"),p("span",{class:"line-number"},"12"),p("br"),p("span",{class:"line-number"},"13"),p("br"),p("span",{class:"line-number"},"14"),p("br"),p("span",{class:"line-number"},"15"),p("br"),p("span",{class:"line-number"},"16"),p("br"),p("span",{class:"line-number"},"17"),p("br"),p("span",{class:"line-number"},"18"),p("br"),p("span",{class:"line-number"},"19"),p("br"),p("span",{class:"line-number"},"20"),p("br"),p("span",{class:"line-number"},"21"),p("br"),p("span",{class:"line-number"},"22"),p("br")])],-1),d=p("div",{class:"language-c ext-c line-numbers-mode"},[p("pre",{class:"language-c"},[p("code",null,[p("span",{class:"token macro property"},[p("span",{class:"token directive-hash"},"#"),p("span",{class:"token directive keyword"},"include"),o(),p("span",{class:"token string"},"<windows.h>")]),o("\n"),p("span",{class:"token macro property"},[p("span",{class:"token directive-hash"},"#"),p("span",{class:"token directive keyword"},"include"),o(),p("span",{class:"token string"},"<stdio.h>")]),o("\n\n"),p("span",{class:"token comment"},"// 宿主进程中打印的函数地址"),o("\n"),p("span",{class:"token macro property"},[p("span",{class:"token directive-hash"},"#"),p("span",{class:"token directive keyword"},"define"),o(),p("span",{class:"token macro-name"},"FUN_ADDR"),o(),p("span",{class:"token expression"},[p("span",{class:"token number"},"0x0000000000401550")])]),o("\n\nDWORD "),p("span",{class:"token function"},"getPid"),p("span",{class:"token punctuation"},"("),o("LPTSTR name"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),o("\n"),p("span",{class:"token keyword"},"int"),o(),p("span",{class:"token function"},"main"),p("span",{class:"token punctuation"},"("),p("span",{class:"token keyword"},"int"),o(" argc"),p("span",{class:"token punctuation"},","),o(),p("span",{class:"token keyword"},"char"),o(),p("span",{class:"token operator"},"*"),o("argv"),p("span",{class:"token punctuation"},"["),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},")"),o("\n"),p("span",{class:"token punctuation"},"{"),o("\n\n    HANDLE hProcess "),p("span",{class:"token operator"},"="),o(),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},";"),o("\n    HANDLE hThread"),p("span",{class:"token punctuation"},";"),o("\n    DWORD dwThread "),p("span",{class:"token operator"},"="),o(),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},";"),o("\n\n    "),p("span",{class:"token comment"},"// 打开进程，第三个参数是进程目标进程ID"),o("\n    hProcess "),p("span",{class:"token operator"},"="),o(),p("span",{class:"token function"},"OpenProcess"),p("span",{class:"token punctuation"},"("),o("PROCESS_ALL_ACCESS"),p("span",{class:"token punctuation"},","),o(" FALSE"),p("span",{class:"token punctuation"},","),o(),p("span",{class:"token number"},"8684"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),o("\n\n    "),p("span",{class:"token keyword"},"if"),o(),p("span",{class:"token punctuation"},"("),o("hProcess "),p("span",{class:"token operator"},"=="),o(),p("span",{class:"token constant"},"NULL"),p("span",{class:"token punctuation"},")"),o("\n    "),p("span",{class:"token punctuation"},"{"),o("\n        "),p("span",{class:"token function"},"printf"),p("span",{class:"token punctuation"},"("),p("span",{class:"token string"},'"can not open process"'),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),o("\n        "),p("span",{class:"token keyword"},"return"),o(),p("span",{class:"token operator"},"-"),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},";"),o("\n    "),p("span",{class:"token punctuation"},"}"),o("\n\n    "),p("span",{class:"token comment"},"// 开启远程线程"),o("\n    hThread "),p("span",{class:"token operator"},"="),o(),p("span",{class:"token function"},"CreateRemoteThread"),p("span",{class:"token punctuation"},"("),o("hProcess"),p("span",{class:"token punctuation"},","),o(),p("span",{class:"token constant"},"NULL"),p("span",{class:"token punctuation"},","),o(),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},","),o(),p("span",{class:"token punctuation"},"("),o("LPTHREAD_START_ROUTINE"),p("span",{class:"token punctuation"},")"),o("FUN_ADDR"),p("span",{class:"token punctuation"},","),o(),p("span",{class:"token constant"},"NULL"),p("span",{class:"token punctuation"},","),o(),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},","),o(),p("span",{class:"token operator"},"&"),o("dwThread"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),o("  \n    "),p("span",{class:"token comment"},"/**\n    * hProcess：目标进程的句柄\n    * lpThreadAttributes：安全描述符的结构体指针，填 NULL 即可\n    * dwStackSize：要创建的远程线程的堆栈大小，一般填 0 使用默认大小\n    * lpStartAddress：远程线程的执行体，也就是创建的线程要执行的过程函数\n    * lpParameter：远程线程执行体的参数，与lpStartAddress 配合使用\n    * dwCreationFlags：创建标志，一般填0\n    * lpThreadId：线程ID的指针，用于接收远程线程创建成功后的ID\n    */"),o("\n\n    "),p("span",{class:"token keyword"},"if"),o(),p("span",{class:"token punctuation"},"("),o("hThread "),p("span",{class:"token operator"},"=="),o(),p("span",{class:"token constant"},"NULL"),p("span",{class:"token punctuation"},")"),o("\n    "),p("span",{class:"token punctuation"},"{"),o("\n        "),p("span",{class:"token function"},"printf"),p("span",{class:"token punctuation"},"("),p("span",{class:"token string"},'"can not create remote thread"'),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),o("\n        "),p("span",{class:"token keyword"},"return"),o(),p("span",{class:"token operator"},"-"),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},";"),o("\n    "),p("span",{class:"token punctuation"},"}"),o("\n\n    "),p("span",{class:"token function"},"CloseHandle"),p("span",{class:"token punctuation"},"("),o("hProcess"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),o("\n    "),p("span",{class:"token function"},"CloseHandle"),p("span",{class:"token punctuation"},"("),o("hThread"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),o("\n    "),p("span",{class:"token keyword"},"return"),o(),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},";"),o("\n"),p("span",{class:"token punctuation"},"}"),o("\n")])]),p("div",{class:"line-numbers"},[p("span",{class:"line-number"},"1"),p("br"),p("span",{class:"line-number"},"2"),p("br"),p("span",{class:"line-number"},"3"),p("br"),p("span",{class:"line-number"},"4"),p("br"),p("span",{class:"line-number"},"5"),p("br"),p("span",{class:"line-number"},"6"),p("br"),p("span",{class:"line-number"},"7"),p("br"),p("span",{class:"line-number"},"8"),p("br"),p("span",{class:"line-number"},"9"),p("br"),p("span",{class:"line-number"},"10"),p("br"),p("span",{class:"line-number"},"11"),p("br"),p("span",{class:"line-number"},"12"),p("br"),p("span",{class:"line-number"},"13"),p("br"),p("span",{class:"line-number"},"14"),p("br"),p("span",{class:"line-number"},"15"),p("br"),p("span",{class:"line-number"},"16"),p("br"),p("span",{class:"line-number"},"17"),p("br"),p("span",{class:"line-number"},"18"),p("br"),p("span",{class:"line-number"},"19"),p("br"),p("span",{class:"line-number"},"20"),p("br"),p("span",{class:"line-number"},"21"),p("br"),p("span",{class:"line-number"},"22"),p("br"),p("span",{class:"line-number"},"23"),p("br"),p("span",{class:"line-number"},"24"),p("br"),p("span",{class:"line-number"},"25"),p("br"),p("span",{class:"line-number"},"26"),p("br"),p("span",{class:"line-number"},"27"),p("br"),p("span",{class:"line-number"},"28"),p("br"),p("span",{class:"line-number"},"29"),p("br"),p("span",{class:"line-number"},"30"),p("br"),p("span",{class:"line-number"},"31"),p("br"),p("span",{class:"line-number"},"32"),p("br"),p("span",{class:"line-number"},"33"),p("br"),p("span",{class:"line-number"},"34"),p("br"),p("span",{class:"line-number"},"35"),p("br"),p("span",{class:"line-number"},"36"),p("br"),p("span",{class:"line-number"},"37"),p("br"),p("span",{class:"line-number"},"38"),p("br"),p("span",{class:"line-number"},"39"),p("br"),p("span",{class:"line-number"},"40"),p("br"),p("span",{class:"line-number"},"41"),p("br"),p("span",{class:"line-number"},"42"),p("br"),p("span",{class:"line-number"},"43"),p("br"),p("span",{class:"line-number"},"44"),p("br"),p("span",{class:"line-number"},"45"),p("br")])],-1),h=p("div",{class:"language-c ext-c line-numbers-mode"},[p("pre",{class:"language-c"},[p("code",null,[p("span",{class:"token macro property"},[p("span",{class:"token directive-hash"},"#"),p("span",{class:"token directive keyword"},"include"),o(),p("span",{class:"token string"},"<windows.h>")]),o("\n"),p("span",{class:"token macro property"},[p("span",{class:"token directive-hash"},"#"),p("span",{class:"token directive keyword"},"include"),o(),p("span",{class:"token string"},"<stdio.h>")]),o("\n\n"),p("span",{class:"token keyword"},"void"),o(),p("span",{class:"token function"},"func1"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},")"),o("\n"),p("span",{class:"token punctuation"},"{"),o("\n    "),p("span",{class:"token comment"},"// 输出函数名及其地址"),o("\n    "),p("span",{class:"token function"},"printf"),p("span",{class:"token punctuation"},"("),p("span",{class:"token string"},'"%s addr:0x%p\\n"'),p("span",{class:"token punctuation"},","),o(" __FUNCTION__"),p("span",{class:"token punctuation"},","),o(" func1"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),o("\n"),p("span",{class:"token punctuation"},"}"),o("\n\nBOOL APIENTRY "),p("span",{class:"token function"},"DllMain"),p("span",{class:"token punctuation"},"("),o("HMODULE hModule"),p("span",{class:"token punctuation"},","),o("\n                      DWORD ul_reason_for_call"),p("span",{class:"token punctuation"},","),o("\n                      LPVOID lpReserved"),p("span",{class:"token punctuation"},")"),o("\n"),p("span",{class:"token punctuation"},"{"),o("\n    "),p("span",{class:"token keyword"},"switch"),o(),p("span",{class:"token punctuation"},"("),o("ul_reason_for_call"),p("span",{class:"token punctuation"},")"),o("\n    "),p("span",{class:"token punctuation"},"{"),o("\n    "),p("span",{class:"token keyword"},"case"),o(" DLL_PROCESS_ATTACH"),p("span",{class:"token operator"},":"),o("\n        "),p("span",{class:"token function"},"MessageBox"),p("span",{class:"token punctuation"},"("),p("span",{class:"token constant"},"NULL"),p("span",{class:"token punctuation"},","),o(),p("span",{class:"token function"},"TEXT"),p("span",{class:"token punctuation"},"("),p("span",{class:"token string"},'"DLL inject successfully"'),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},","),o(),p("span",{class:"token function"},"TEXT"),p("span",{class:"token punctuation"},"("),p("span",{class:"token string"},'"Warning:"'),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},","),o(" MB_OK"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),o("\n        "),p("span",{class:"token function"},"func1"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),o("\n    "),p("span",{class:"token keyword"},"case"),o(" DLL_THREAD_ATTACH"),p("span",{class:"token operator"},":"),o("\n    "),p("span",{class:"token keyword"},"case"),o(" DLL_THREAD_DETACH"),p("span",{class:"token operator"},":"),o("\n    "),p("span",{class:"token keyword"},"case"),o(" DLL_PROCESS_DETACH"),p("span",{class:"token operator"},":"),o("\n        "),p("span",{class:"token keyword"},"break"),p("span",{class:"token punctuation"},";"),o("\n    "),p("span",{class:"token punctuation"},"}"),o("\n    "),p("span",{class:"token keyword"},"return"),o(" TRUE"),p("span",{class:"token punctuation"},";"),o("\n"),p("span",{class:"token punctuation"},"}"),o("\n"),p("span",{class:"token comment"},"// 执行 gcc .\\mydll.c -shared -o mydll.dll 以生成动态链接库  "),o("\n")])]),p("div",{class:"line-numbers"},[p("span",{class:"line-number"},"1"),p("br"),p("span",{class:"line-number"},"2"),p("br"),p("span",{class:"line-number"},"3"),p("br"),p("span",{class:"line-number"},"4"),p("br"),p("span",{class:"line-number"},"5"),p("br"),p("span",{class:"line-number"},"6"),p("br"),p("span",{class:"line-number"},"7"),p("br"),p("span",{class:"line-number"},"8"),p("br"),p("span",{class:"line-number"},"9"),p("br"),p("span",{class:"line-number"},"10"),p("br"),p("span",{class:"line-number"},"11"),p("br"),p("span",{class:"line-number"},"12"),p("br"),p("span",{class:"line-number"},"13"),p("br"),p("span",{class:"line-number"},"14"),p("br"),p("span",{class:"line-number"},"15"),p("br"),p("span",{class:"line-number"},"16"),p("br"),p("span",{class:"line-number"},"17"),p("br"),p("span",{class:"line-number"},"18"),p("br"),p("span",{class:"line-number"},"19"),p("br"),p("span",{class:"line-number"},"20"),p("br"),p("span",{class:"line-number"},"21"),p("br"),p("span",{class:"line-number"},"22"),p("br"),p("span",{class:"line-number"},"23"),p("br"),p("span",{class:"line-number"},"24"),p("br"),p("span",{class:"line-number"},"25"),p("br"),p("span",{class:"line-number"},"26"),p("br")])],-1),g=p("div",{class:"language-c ext-c line-numbers-mode"},[p("pre",{class:"language-c"},[p("code",null,[p("span",{class:"token macro property"},[p("span",{class:"token directive-hash"},"#"),p("span",{class:"token directive keyword"},"include"),o(),p("span",{class:"token string"},"<windows.h>")]),o("\n"),p("span",{class:"token macro property"},[p("span",{class:"token directive-hash"},"#"),p("span",{class:"token directive keyword"},"include"),o(),p("span",{class:"token string"},"<stdio.h>")]),o("\n\n"),p("span",{class:"token comment"},"// 进程id  "),o("\n"),p("span",{class:"token macro property"},[p("span",{class:"token directive-hash"},"#"),p("span",{class:"token directive keyword"},"define"),o(),p("span",{class:"token macro-name"},"Pid"),o(),p("span",{class:"token expression"},[p("span",{class:"token number"},"26036")])]),o("\n"),p("span",{class:"token comment"},"// dll 可以用绝对路径，也可以用相对路径  "),o("\n"),p("span",{class:"token comment"},"// 但最好还是用绝对路径"),o("\n"),p("span",{class:"token macro property"},[p("span",{class:"token directive-hash"},"#"),p("span",{class:"token directive keyword"},"define"),o(),p("span",{class:"token macro-name"},"DLL_NAME"),o(),p("span",{class:"token string"},'"mydll.dll"')]),o("\n\n"),p("span",{class:"token keyword"},"int"),o(),p("span",{class:"token function"},"main"),p("span",{class:"token punctuation"},"("),p("span",{class:"token keyword"},"int"),o(" argc"),p("span",{class:"token punctuation"},","),o(),p("span",{class:"token keyword"},"char"),o(),p("span",{class:"token operator"},"*"),o("argv"),p("span",{class:"token punctuation"},"["),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},")"),o("\n"),p("span",{class:"token punctuation"},"{"),o("\n    HANDLE hProcess "),p("span",{class:"token operator"},"="),o(),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},";"),o("\n    HANDLE hThread"),p("span",{class:"token punctuation"},";"),o("\n    DWORD dwThread "),p("span",{class:"token operator"},"="),o(),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},";"),o("\n\n    "),p("span",{class:"token comment"},"// 打开进程  "),o("\n    hProcess "),p("span",{class:"token operator"},"="),o(),p("span",{class:"token function"},"OpenProcess"),p("span",{class:"token punctuation"},"("),o("PROCESS_ALL_ACCESS"),p("span",{class:"token punctuation"},","),o(" FALSE"),p("span",{class:"token punctuation"},","),o(" Pid"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),o("\n    "),p("span",{class:"token keyword"},"if"),o(),p("span",{class:"token punctuation"},"("),o("hProcess "),p("span",{class:"token operator"},"=="),o(),p("span",{class:"token constant"},"NULL"),p("span",{class:"token punctuation"},")"),o("\n    "),p("span",{class:"token punctuation"},"{"),o("\n        "),p("span",{class:"token function"},"printf"),p("span",{class:"token punctuation"},"("),p("span",{class:"token string"},'"can not open process"'),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),o("\n        "),p("span",{class:"token keyword"},"return"),o(),p("span",{class:"token operator"},"-"),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},";"),o("\n    "),p("span",{class:"token punctuation"},"}"),o("\n\n    "),p("span",{class:"token comment"},"// 在进程内存入dll 路径字符串  "),o("\n    "),p("span",{class:"token comment"},"// 即将`my_dll.dll` 字符串保存至进程空间"),o("\n    PVOID pDllName "),p("span",{class:"token operator"},"="),o(),p("span",{class:"token function"},"VirtualAllocEx"),p("span",{class:"token punctuation"},"("),o("hProcess"),p("span",{class:"token punctuation"},","),o(),p("span",{class:"token constant"},"NULL"),p("span",{class:"token punctuation"},","),o(),p("span",{class:"token function"},"strlen"),p("span",{class:"token punctuation"},"("),o("DLL_NAME"),p("span",{class:"token punctuation"},")"),o(),p("span",{class:"token operator"},"+"),o(),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},","),o(" MEM_COMMIT"),p("span",{class:"token punctuation"},","),o(" PAGE_READWRITE"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),o("\n    "),p("span",{class:"token keyword"},"if"),o(),p("span",{class:"token punctuation"},"("),o("pDllName "),p("span",{class:"token operator"},"=="),o(),p("span",{class:"token constant"},"NULL"),p("span",{class:"token punctuation"},")"),o("\n    "),p("span",{class:"token punctuation"},"{"),o("\n        "),p("span",{class:"token function"},"printf"),p("span",{class:"token punctuation"},"("),p("span",{class:"token string"},'"can not allocate memory for dll"'),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),o("\n        "),p("span",{class:"token keyword"},"return"),o(),p("span",{class:"token operator"},"-"),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},";"),o("\n    "),p("span",{class:"token punctuation"},"}"),o("\n    "),p("span",{class:"token comment"},"// 写入dll 名称"),o("\n    SIZE_T lenDll "),p("span",{class:"token operator"},"="),o(),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},";"),o("\n    "),p("span",{class:"token function"},"WriteProcessMemory"),p("span",{class:"token punctuation"},"("),o("hProcess"),p("span",{class:"token punctuation"},","),o(" pDllName"),p("span",{class:"token punctuation"},","),o(),p("span",{class:"token punctuation"},"("),o("BYTE "),p("span",{class:"token operator"},"*"),p("span",{class:"token punctuation"},")"),o("DLL_NAME"),p("span",{class:"token punctuation"},","),o(),p("span",{class:"token function"},"strlen"),p("span",{class:"token punctuation"},"("),o("DLL_NAME"),p("span",{class:"token punctuation"},")"),o(),p("span",{class:"token operator"},"+"),o(),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},","),o(),p("span",{class:"token operator"},"&"),o("lenDll"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),o("\n    \n    "),p("span",{class:"token comment"},"// 获取Kernal32.dll 中的`LoadLibraryA` 方法"),o("\n    HMODULE hModule "),p("span",{class:"token operator"},"="),o(),p("span",{class:"token function"},"GetModuleHandle"),p("span",{class:"token punctuation"},"("),p("span",{class:"token function"},"TEXT"),p("span",{class:"token punctuation"},"("),p("span",{class:"token string"},'"Kernel32.dll"'),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),o("\n    "),p("span",{class:"token keyword"},"if"),o(),p("span",{class:"token punctuation"},"("),o("hModule "),p("span",{class:"token operator"},"=="),o(),p("span",{class:"token constant"},"NULL"),p("span",{class:"token punctuation"},")"),o("\n    "),p("span",{class:"token punctuation"},"{"),o("\n        "),p("span",{class:"token function"},"printf"),p("span",{class:"token punctuation"},"("),p("span",{class:"token string"},'"can not get "'),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),o("\n        "),p("span",{class:"token keyword"},"return"),o(),p("span",{class:"token operator"},"-"),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},";"),o("\n    "),p("span",{class:"token punctuation"},"}"),o("\n    FARPROC func1 "),p("span",{class:"token operator"},"="),o(),p("span",{class:"token function"},"GetProcAddress"),p("span",{class:"token punctuation"},"("),o("hModule"),p("span",{class:"token punctuation"},","),o(),p("span",{class:"token string"},'"LoadLibraryA"'),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),o("\n    \n    "),p("span",{class:"token comment"},"// 在开启远程线程时，执行LoadLibraryA，加载my_dll.dll"),o("\n    hThread "),p("span",{class:"token operator"},"="),o(),p("span",{class:"token function"},"CreateRemoteThread"),p("span",{class:"token punctuation"},"("),o("hProcess"),p("span",{class:"token punctuation"},","),o(),p("span",{class:"token constant"},"NULL"),p("span",{class:"token punctuation"},","),o(),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},","),o(),p("span",{class:"token punctuation"},"("),o("LPTHREAD_START_ROUTINE"),p("span",{class:"token punctuation"},")"),o("func1"),p("span",{class:"token punctuation"},","),o(" pDllName"),p("span",{class:"token punctuation"},","),o(),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},","),o(),p("span",{class:"token operator"},"&"),o("dwThread"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),o("\n    "),p("span",{class:"token keyword"},"if"),o(),p("span",{class:"token punctuation"},"("),o("hThread "),p("span",{class:"token operator"},"=="),o(),p("span",{class:"token constant"},"NULL"),p("span",{class:"token punctuation"},")"),o("\n    "),p("span",{class:"token punctuation"},"{"),o("\n        "),p("span",{class:"token function"},"printf"),p("span",{class:"token punctuation"},"("),p("span",{class:"token string"},'"can not create remote thread"'),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),o("\n        "),p("span",{class:"token keyword"},"return"),o(),p("span",{class:"token operator"},"-"),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},";"),o("\n    "),p("span",{class:"token punctuation"},"}"),o("\n\n    "),p("span",{class:"token function"},"CloseHandle"),p("span",{class:"token punctuation"},"("),o("hProcess"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),o("\n    "),p("span",{class:"token function"},"CloseHandle"),p("span",{class:"token punctuation"},"("),o("hThread"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),o("\n    "),p("span",{class:"token keyword"},"return"),o(),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},";"),o("\n"),p("span",{class:"token punctuation"},"}"),o("\n")])]),p("div",{class:"line-numbers"},[p("span",{class:"line-number"},"1"),p("br"),p("span",{class:"line-number"},"2"),p("br"),p("span",{class:"line-number"},"3"),p("br"),p("span",{class:"line-number"},"4"),p("br"),p("span",{class:"line-number"},"5"),p("br"),p("span",{class:"line-number"},"6"),p("br"),p("span",{class:"line-number"},"7"),p("br"),p("span",{class:"line-number"},"8"),p("br"),p("span",{class:"line-number"},"9"),p("br"),p("span",{class:"line-number"},"10"),p("br"),p("span",{class:"line-number"},"11"),p("br"),p("span",{class:"line-number"},"12"),p("br"),p("span",{class:"line-number"},"13"),p("br"),p("span",{class:"line-number"},"14"),p("br"),p("span",{class:"line-number"},"15"),p("br"),p("span",{class:"line-number"},"16"),p("br"),p("span",{class:"line-number"},"17"),p("br"),p("span",{class:"line-number"},"18"),p("br"),p("span",{class:"line-number"},"19"),p("br"),p("span",{class:"line-number"},"20"),p("br"),p("span",{class:"line-number"},"21"),p("br"),p("span",{class:"line-number"},"22"),p("br"),p("span",{class:"line-number"},"23"),p("br"),p("span",{class:"line-number"},"24"),p("br"),p("span",{class:"line-number"},"25"),p("br"),p("span",{class:"line-number"},"26"),p("br"),p("span",{class:"line-number"},"27"),p("br"),p("span",{class:"line-number"},"28"),p("br"),p("span",{class:"line-number"},"29"),p("br"),p("span",{class:"line-number"},"30"),p("br"),p("span",{class:"line-number"},"31"),p("br"),p("span",{class:"line-number"},"32"),p("br"),p("span",{class:"line-number"},"33"),p("br"),p("span",{class:"line-number"},"34"),p("br"),p("span",{class:"line-number"},"35"),p("br"),p("span",{class:"line-number"},"36"),p("br"),p("span",{class:"line-number"},"37"),p("br"),p("span",{class:"line-number"},"38"),p("br"),p("span",{class:"line-number"},"39"),p("br"),p("span",{class:"line-number"},"40"),p("br"),p("span",{class:"line-number"},"41"),p("br"),p("span",{class:"line-number"},"42"),p("br"),p("span",{class:"line-number"},"43"),p("br"),p("span",{class:"line-number"},"44"),p("br"),p("span",{class:"line-number"},"45"),p("br"),p("span",{class:"line-number"},"46"),p("br"),p("span",{class:"line-number"},"47"),p("br"),p("span",{class:"line-number"},"48"),p("br"),p("span",{class:"line-number"},"49"),p("br"),p("span",{class:"line-number"},"50"),p("br"),p("span",{class:"line-number"},"51"),p("br"),p("span",{class:"line-number"},"52"),p("br"),p("span",{class:"line-number"},"53"),p("br"),p("span",{class:"line-number"},"54"),p("br"),p("span",{class:"line-number"},"55"),p("br"),p("span",{class:"line-number"},"56"),p("br")])],-1),f=p("div",{class:"language-c ext-c line-numbers-mode"},[p("pre",{class:"language-c"},[p("code",null,[p("span",{class:"token macro property"},[p("span",{class:"token directive-hash"},"#"),p("span",{class:"token directive keyword"},"include"),o(),p("span",{class:"token string"},"<Windows.h>")]),o("\n"),p("span",{class:"token macro property"},[p("span",{class:"token directive-hash"},"#"),p("span",{class:"token directive keyword"},"include"),o(),p("span",{class:"token string"},"<stdio.h>")]),o("\n"),p("span",{class:"token macro property"},[p("span",{class:"token directive-hash"},"#"),p("span",{class:"token directive keyword"},"include"),o(),p("span",{class:"token string"},"<TlHelp32.h>")]),o("\n\nDWORD "),p("span",{class:"token function"},"GetPid"),p("span",{class:"token punctuation"},"("),p("span",{class:"token keyword"},"const"),o(),p("span",{class:"token keyword"},"char"),o(),p("span",{class:"token operator"},"*"),o("strProcessName"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),o("\n\n"),p("span",{class:"token keyword"},"int"),o(),p("span",{class:"token function"},"main"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},")"),o("\n"),p("span",{class:"token punctuation"},"{"),o("\n    "),p("span",{class:"token function"},"GetPid"),p("span",{class:"token punctuation"},"("),p("span",{class:"token string"},'"host.exe"'),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),o("\n    "),p("span",{class:"token keyword"},"return"),o(),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},";"),o("\n"),p("span",{class:"token punctuation"},"}"),o("\n\nDWORD "),p("span",{class:"token function"},"GetPid"),p("span",{class:"token punctuation"},"("),p("span",{class:"token keyword"},"const"),o(),p("span",{class:"token keyword"},"char"),o(),p("span",{class:"token operator"},"*"),o("strProcessName"),p("span",{class:"token punctuation"},")"),o("\n"),p("span",{class:"token punctuation"},"{"),o("\n    PROCESSENTRY32 pe32"),p("span",{class:"token punctuation"},";"),o("\n    pe32"),p("span",{class:"token punctuation"},"."),o("dwSize "),p("span",{class:"token operator"},"="),o(),p("span",{class:"token keyword"},"sizeof"),p("span",{class:"token punctuation"},"("),o("PROCESSENTRY32"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),o("\n\n    HANDLE hProcessSnap "),p("span",{class:"token operator"},"="),o(),p("span",{class:"token function"},"CreateToolhelp32Snapshot"),p("span",{class:"token punctuation"},"("),o("TH32CS_SNAPPROCESS"),p("span",{class:"token punctuation"},","),o(),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),o("\n    "),p("span",{class:"token keyword"},"if"),o(),p("span",{class:"token punctuation"},"("),o("hProcessSnap "),p("span",{class:"token operator"},"=="),o(" INVALID_HANDLE_VALUE"),p("span",{class:"token punctuation"},")"),o("\n    "),p("span",{class:"token punctuation"},"{"),o("\n        "),p("span",{class:"token function"},"printf"),p("span",{class:"token punctuation"},"("),p("span",{class:"token string"},'"CreateToolhelp32Snapshot 调用失败.\\n"'),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),o("\n        "),p("span",{class:"token keyword"},"return"),o(),p("span",{class:"token operator"},"-"),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},";"),o("\n    "),p("span",{class:"token punctuation"},"}"),o("\n\n    BOOL bMore "),p("span",{class:"token operator"},"="),o(),p("span",{class:"token function"},"Process32First"),p("span",{class:"token punctuation"},"("),o("hProcessSnap"),p("span",{class:"token punctuation"},","),o(),p("span",{class:"token operator"},"&"),o("pe32"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),o("\n\n    "),p("span",{class:"token keyword"},"while"),o(),p("span",{class:"token punctuation"},"("),o("bMore"),p("span",{class:"token punctuation"},")"),o("\n    "),p("span",{class:"token punctuation"},"{"),o("\n        "),p("span",{class:"token comment"},"// 打印所有进程信息"),o("\n        "),p("span",{class:"token comment"},'// printf("Process Name: %s\\n", pe32.szExeFile); '),o("\n        "),p("span",{class:"token comment"},'// printf("Process Id: %u\\n\\n", pe32.th32ProcessID);'),o("\n        "),p("span",{class:"token keyword"},"if"),o(),p("span",{class:"token punctuation"},"("),p("span",{class:"token function"},"lstrcmp"),p("span",{class:"token punctuation"},"("),o("pe32"),p("span",{class:"token punctuation"},"."),o("szExeFile"),p("span",{class:"token punctuation"},","),o(" strProcessName"),p("span",{class:"token punctuation"},")"),o(),p("span",{class:"token operator"},"=="),o(),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},")"),o("\n        "),p("span",{class:"token punctuation"},"{"),o("\n            "),p("span",{class:"token keyword"},"break"),p("span",{class:"token punctuation"},";"),o("\n        "),p("span",{class:"token punctuation"},"}"),o("\n\n        bMore "),p("span",{class:"token operator"},"="),o(),p("span",{class:"token function"},"Process32Next"),p("span",{class:"token punctuation"},"("),o("hProcessSnap"),p("span",{class:"token punctuation"},","),o(),p("span",{class:"token operator"},"&"),o("pe32"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),o("\n    "),p("span",{class:"token punctuation"},"}"),o("\n    "),p("span",{class:"token function"},"CloseHandle"),p("span",{class:"token punctuation"},"("),o("hProcessSnap"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),o("\n\n    "),p("span",{class:"token keyword"},"return"),o(" pe32"),p("span",{class:"token punctuation"},"."),o("th32ProcessID"),p("span",{class:"token punctuation"},";"),o("\n"),p("span",{class:"token punctuation"},"}"),o("\n")])]),p("div",{class:"line-numbers"},[p("span",{class:"line-number"},"1"),p("br"),p("span",{class:"line-number"},"2"),p("br"),p("span",{class:"line-number"},"3"),p("br"),p("span",{class:"line-number"},"4"),p("br"),p("span",{class:"line-number"},"5"),p("br"),p("span",{class:"line-number"},"6"),p("br"),p("span",{class:"line-number"},"7"),p("br"),p("span",{class:"line-number"},"8"),p("br"),p("span",{class:"line-number"},"9"),p("br"),p("span",{class:"line-number"},"10"),p("br"),p("span",{class:"line-number"},"11"),p("br"),p("span",{class:"line-number"},"12"),p("br"),p("span",{class:"line-number"},"13"),p("br"),p("span",{class:"line-number"},"14"),p("br"),p("span",{class:"line-number"},"15"),p("br"),p("span",{class:"line-number"},"16"),p("br"),p("span",{class:"line-number"},"17"),p("br"),p("span",{class:"line-number"},"18"),p("br"),p("span",{class:"line-number"},"19"),p("br"),p("span",{class:"line-number"},"20"),p("br"),p("span",{class:"line-number"},"21"),p("br"),p("span",{class:"line-number"},"22"),p("br"),p("span",{class:"line-number"},"23"),p("br"),p("span",{class:"line-number"},"24"),p("br"),p("span",{class:"line-number"},"25"),p("br"),p("span",{class:"line-number"},"26"),p("br"),p("span",{class:"line-number"},"27"),p("br"),p("span",{class:"line-number"},"28"),p("br"),p("span",{class:"line-number"},"29"),p("br"),p("span",{class:"line-number"},"30"),p("br"),p("span",{class:"line-number"},"31"),p("br"),p("span",{class:"line-number"},"32"),p("br"),p("span",{class:"line-number"},"33"),p("br"),p("span",{class:"line-number"},"34"),p("br"),p("span",{class:"line-number"},"35"),p("br"),p("span",{class:"line-number"},"36"),p("br"),p("span",{class:"line-number"},"37"),p("br"),p("span",{class:"line-number"},"38"),p("br"),p("span",{class:"line-number"},"39"),p("br"),p("span",{class:"line-number"},"40"),p("br"),p("span",{class:"line-number"},"41"),p("br"),p("span",{class:"line-number"},"42"),p("br")])],-1),y=c('<h3 id="注意事项"><a class="header-anchor" href="#注意事项">#</a> 注意事项</h3><ol><li>对于32 位的目标进程，应当将源码编译为32 位的可执行程序然后注入。否则不会有任何结果；</li><li>对于MinGW 来说，仅支持32 位gcc；而Mingw64 仅支持64 位。虽然可以通过-m[32|64] 指定编译时的目标架构，但是会报异常。</li></ol><h2 id="c-语言调用go-生成的dll"><a class="header-anchor" href="#c-语言调用go-生成的dll">#</a> C 语言调用Go 生成的DLL</h2><p>事情的起因是<s>我想学黑</s>，最近在看dll 远程线程注入的文章。迫于C/C++ 写起来太过繁琐，就想着能不能通过C 调用golang 编译的dll，进而将C 作为胶水语言使用。于是就有了本文。<br> 目标：在<code>notepad.exe</code> 上启动一个简单的http 服务。<br> 环境：<code>Win10 Pro 64 位</code>、<code>MinGW-w64</code>、<code>golang 15.6</code></p><p>因为直接从头到尾开发的话，可能会让人看得一头雾水，我准备先从较小的模块开始写起。这也是一次完整的实践流程。</p><h3 id="golang-编写http-服务"><a class="header-anchor" href="#golang-编写http-服务">#</a> golang 编写http 服务</h3>',6),v=o("代码参考自简书"),w={href:"https://www.jianshu.com/p/8f208a6596f7",target:"_blank",rel:"noopener noreferrer"},L=o("go实现简单的http服务"),_=o("，这里稍作修改："),D=c('<div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">// http.go</span>\n<span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token string">&quot;C&quot;</span>\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n\t<span class="token string">&quot;fmt&quot;</span>\n\t<span class="token string">&quot;net/http&quot;</span>\n<span class="token punctuation">)</span>\n\n<span class="token comment">// http 请求处理函数</span>\n<span class="token keyword">func</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 导出函数。在编译成DLL 后可被调用者发现  </span>\n<span class="token comment">// 下面的注释必须有 //export 函数名  </span>\n<span class="token comment">// 其中导出函数名最好与原函数名保持一致 </span>\n\n<span class="token comment">//export StartHttp</span>\n<span class="token keyword">func</span> <span class="token function">StartHttp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\thttp<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> sayHello<span class="token punctuation">)</span>\n\n\terr <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1:9999&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>\n\t<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\t\tfmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Error: %v\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>\n\t\t<span class="token keyword">return</span>\n\t<span class="token punctuation">}</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Listening: http://127.0.0.1:9000&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// StartHttp();  // 调试时取消这一行的注释  </span>\n    <span class="token comment">// 编译时main 函数最好为空</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><p>通过以下命令进行调试：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 注意调试时需要取消掉main 方法里面的注释</span>\ngo run .<span class="token punctuation">\\</span>http.go  <span class="token comment"># 如果不出意外，访问`http://localhost:9999` 就能看到`Hello World!` 了  </span>\n\n<span class="token comment"># 编译  </span>\ngo build -buildmode<span class="token operator">=</span>c-shared -o http.dll .<span class="token punctuation">\\</span>http.go\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>编译好后待用。</p><h3 id="c-编写dll"><a class="header-anchor" href="#c-编写dll">#</a> c 编写dll</h3><p>如果我们需要从远程线程注入上面的<code>http.dll</code> 是不行的，因为它没有显式的入口函数。需要用C/C++ 开发一个带入口函数的<code>loader.dll</code> 来包装一下。注入<code>loader.dll</code>，在<code>loader.dll</code> 初始化的过程中，加载并获取<code>http.dll</code> 内<code>StartHttp()</code> 函数的地址。注意，只获取地址就行了，不要执行，因为一旦执行就会引发程序死锁。这是本文的重点一。</p><h4 id="dll-参数传递"><a class="header-anchor" href="#dll-参数传递">#</a> dll 参数传递</h4><p>因为加载dll 时不能传入参数，所以我们需要在<code>loader.dll</code> 中开辟一块共享内存来存放从<code>http.dll</code> 获取到的<code>StartHttp()</code> 函数的句柄（可以理解为指针）。为什么要用共享内存，因为同一个dll 加载到不同的进程中的地址可能也是不一样的。这也是本文的重点二。</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;windows.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>\n\n<span class="token comment">// 开辟共享内存的宏命令</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__GNUC__</span></span>\nHANDLE k <span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">section</span><span class="token punctuation">(</span><span class="token string">&quot;.shared&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> shared<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_MSC_VER</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">data_seg</span><span class="token punctuation">(</span></span><span class="token string">&quot;.shared&quot;</span><span class="token expression"><span class="token punctuation">)</span></span></span>\nHANDLE k <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">data_seg</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">comment</span><span class="token punctuation">(</span>linker<span class="token punctuation">,</span> </span><span class="token string">&quot;/section:.shared,RWS&quot;</span><span class="token expression"><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>\n\n<span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>StartHttp<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 函数类型定义</span>\n\nHMODULE hHttp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token comment">// 用来存放http.dll 句柄</span>\n\nBOOL APIENTRY <span class="token function">DllMain</span><span class="token punctuation">(</span>HMODULE hModule<span class="token punctuation">,</span>\n                      DWORD ul_reason_for_call<span class="token punctuation">,</span>\n                      LPVOID lpReserved<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">switch</span> <span class="token punctuation">(</span>ul_reason_for_call<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> DLL_PROCESS_ATTACH<span class="token operator">:</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">// 简化了一些一场判断</span>\n        hHttp <span class="token operator">=</span> <span class="token function">LoadLibrary</span><span class="token punctuation">(</span><span class="token string">&quot;http.dll&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        StartHttp startWorker <span class="token operator">=</span> <span class="token punctuation">(</span>StartHttp<span class="token punctuation">)</span><span class="token function">GetProcAddress</span><span class="token punctuation">(</span>hHttp<span class="token punctuation">,</span> <span class="token string">&quot;StartHttp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        k <span class="token operator">=</span> startWorker<span class="token punctuation">;</span>  <span class="token comment">// 将http.dll 中的StartHttp() 的句柄（指针）放入共享内存</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">case</span> DLL_PROCESS_DETACH<span class="token operator">:</span>\n    <span class="token punctuation">{</span>\n        <span class="token function">FreeLibrary</span><span class="token punctuation">(</span>hHttp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 进程结束时释放http.dll</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">case</span> DLL_THREAD_ATTACH<span class="token operator">:</span>\n    <span class="token keyword">case</span> DLL_THREAD_DETACH<span class="token operator">:</span>\n    <span class="token keyword">default</span><span class="token operator">:</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 导出函数，用于调用者获取共享内存中的变量</span>\nHANDLE <span class="token function">GetHttpStarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">return</span> k<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div><p>如果是直接调用<code>http.dll</code> 的话，是不需要这个C 语言中间层的。编译备用</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>gcc .<span class="token punctuation">\\</span>loader.c -shared -o .<span class="token punctuation">\\</span>loader.dll\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="调试"><a class="header-anchor" href="#调试">#</a> 调试</h3><p>下面是通过C 语言调用<code>loader.dll</code> 进而调用<code>http.dll</code> 的例子。</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// client.c  </span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;windows.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory.h&gt;</span></span>\n\n<span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>StartHttp<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// http.dll 中的到处方法类型</span>\n<span class="token keyword">typedef</span> <span class="token function">HMODULE</span> <span class="token punctuation">(</span><span class="token operator">*</span>GetHttpStarter<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// loader.dll 中的导出方法类型</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">char</span> <span class="token operator">*</span>dllPath <span class="token operator">=</span> <span class="token string">&quot;loader.dll&quot;</span><span class="token punctuation">;</span>\n    HMODULE hLoader <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n\n    hLoader <span class="token operator">=</span> <span class="token function">LoadLibrary</span><span class="token punctuation">(</span><span class="token string">&quot;loader.dll&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    GetHttpStarter getHttpStarter <span class="token operator">=</span> <span class="token punctuation">(</span>GetHttpStarter<span class="token punctuation">)</span><span class="token function">GetProcAddress</span><span class="token punctuation">(</span>hLoader<span class="token punctuation">,</span> <span class="token string">&quot;GetHttpStarter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 获取loader.dll 中的到处方法</span>\n    StartHttp startHttp <span class="token operator">=</span> <span class="token punctuation">(</span>StartHttp<span class="token punctuation">)</span><span class="token function">getHttpStarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 获取http.dll 中的导出方法</span>\n    <span class="token function">startHttp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 启动http 服务</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;^^\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">FreeLibrary</span><span class="token punctuation">(</span>hLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>编译，并且将<code>loader.dll</code>、<code>http.dll</code> 放在同一目录，然后执行</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>gcc .<span class="token punctuation">\\</span>client.c -o .<span class="token punctuation">\\</span>client.exe  \n\n.<span class="token punctuation">\\</span>client.exe \n<span class="token comment"># 正常来说，访问`http://localshost:9999` 也是能看到`Hello World!` 的</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="远程线程注入-1"><a class="header-anchor" href="#远程线程注入-1">#</a> 远程线程注入</h3><p>一般来说，<code>LoadLibrary</code> 函数会默认加载同目录下的dll 文件。由于我们是在目标进程中开启远程线程，那么在加载dll 文件时的默认目录就需要手工指定了，最好是绝对目录。</p><details class="custom-container details"><summary>Client.c</summary><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// client.c  </span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;windows.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;TlHelp32.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>\n\n<span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>StartHttp<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">typedef</span> <span class="token function">HMODULE</span> <span class="token punctuation">(</span><span class="token operator">*</span>GetHttpStarter<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nDWORD <span class="token function">GetProcIdByName</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>sProcName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">void</span> <span class="token function">InjectDll</span><span class="token punctuation">(</span>DWORD nPid<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>sDllName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// 获取loader.dll 的绝对路径</span>\n    <span class="token keyword">char</span> dllPath<span class="token punctuation">[</span>MAX_PATH<span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token operator">*</span>dllName <span class="token operator">=</span> <span class="token string">&quot;\\\\loader.dll&quot;</span><span class="token punctuation">;</span>\n    <span class="token function">GetCurrentDirectory</span><span class="token punctuation">(</span>MAX_PATH<span class="token punctuation">,</span> dllPath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">strncat</span><span class="token punctuation">(</span>dllPath<span class="token punctuation">,</span> dllName<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>dllName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 获取目标进程</span>\n    <span class="token keyword">char</span> <span class="token operator">*</span>sTarget <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> nPid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token punctuation">(</span>nPid <span class="token operator">=</span> <span class="token function">GetProcIdByName</span><span class="token punctuation">(</span>sTarget<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;There is no process named %s\\n&quot;</span><span class="token punctuation">,</span> sTarget<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 第一次开启远程线程，注入loader.dll  </span>\n    <span class="token comment">// 自动加载http.dll  </span>\n    <span class="token function">InjectDll</span><span class="token punctuation">(</span>nPid<span class="token punctuation">,</span> dllPath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token comment">// 客户端加载loader.dll 通过共享内存获取http.dll 中函数的实际位置</span>\n    HMODULE hLoader <span class="token operator">=</span> <span class="token function">LoadLibrary</span><span class="token punctuation">(</span>dllPath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    GetHttpStarter getHttpStarter <span class="token operator">=</span> <span class="token punctuation">(</span>GetHttpStarter<span class="token punctuation">)</span><span class="token function">GetProcAddress</span><span class="token punctuation">(</span>hLoader<span class="token punctuation">,</span> <span class="token string">&quot;GetHttpStarter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    StartHttp startHttp <span class="token operator">=</span> <span class="token punctuation">(</span>StartHttp<span class="token punctuation">)</span><span class="token function">getHttpStarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 第二次开启远程线程  </span>\n    <span class="token comment">// 启动http 服务</span>\n    HANDLE hProcess <span class="token operator">=</span><span class="token function">OpenProcess</span><span class="token punctuation">(</span>PROCESS_ALL_ACCESS<span class="token punctuation">,</span> FALSE<span class="token punctuation">,</span> nPid<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    HANDLE hThread<span class="token punctuation">;</span>\n    DWORD dwThread <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    hThread <span class="token operator">=</span> <span class="token function">CreateRemoteThread</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LPTHREAD_START_ROUTINE<span class="token punctuation">)</span>startHttp<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>dwThread<span class="token punctuation">)</span><span class="token punctuation">;</span>    \n    <span class="token function">CloseHandle</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">CloseHandle</span><span class="token punctuation">(</span>hThread<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;^^\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">FreeLibrary</span><span class="token punctuation">(</span>hLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token comment">// 通过进程名获取进程Id</span>\nDWORD <span class="token function">GetProcIdByName</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>sProcName<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    PROCESSENTRY32 pe32<span class="token punctuation">;</span>\n    pe32<span class="token punctuation">.</span>dwSize <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>PROCESSENTRY32<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    HANDLE hProcessSnap <span class="token operator">=</span> <span class="token function">CreateToolhelp32Snapshot</span><span class="token punctuation">(</span>TH32CS_SNAPPROCESS<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>hProcessSnap <span class="token operator">==</span> INVALID_HANDLE_VALUE<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    BOOL bMore <span class="token operator">=</span> <span class="token function">Process32First</span><span class="token punctuation">(</span>hProcessSnap<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pe32<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>bMore<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcasecmp</span><span class="token punctuation">(</span>pe32<span class="token punctuation">.</span>szExeFile<span class="token punctuation">,</span> sProcName<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> pe32<span class="token punctuation">.</span>th32ProcessID<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        bMore <span class="token operator">=</span> <span class="token function">Process32Next</span><span class="token punctuation">(</span>hProcessSnap<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pe32<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">CloseHandle</span><span class="token punctuation">(</span>hProcessSnap<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 将dll 注入目标进程</span>\n<span class="token keyword">void</span> <span class="token function">InjectDll</span><span class="token punctuation">(</span>DWORD nPid<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>sDllName<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    HANDLE hProcess <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    HANDLE hThread<span class="token punctuation">;</span>\n    DWORD dwThread <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n    hProcess <span class="token operator">=</span> <span class="token function">OpenProcess</span><span class="token punctuation">(</span>PROCESS_ALL_ACCESS<span class="token punctuation">,</span> FALSE<span class="token punctuation">,</span> nPid<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>hProcess <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;open process failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">CloseHandle</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    PVOID pDllName <span class="token operator">=</span> <span class="token function">VirtualAllocEx</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>sDllName<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> MEM_COMMIT<span class="token punctuation">,</span> PAGE_READWRITE<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>pDllName <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;allocate memory for dll failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">CloseHandle</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    SIZE_T lenDll <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token function">WriteProcessMemory</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> pDllName<span class="token punctuation">,</span> <span class="token punctuation">(</span>BYTE <span class="token operator">*</span><span class="token punctuation">)</span>sDllName<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>sDllName<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>lenDll<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 获取Kernal32.dll 中的`LoadLibraryA` 方法</span>\n    HMODULE hModule <span class="token operator">=</span> <span class="token function">GetModuleHandle</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">&quot;Kernel32.dll&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>hModule <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Load Kernel32.dll failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">CloseHandle</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    FARPROC func1 <span class="token operator">=</span> <span class="token function">GetProcAddress</span><span class="token punctuation">(</span>hModule<span class="token punctuation">,</span> <span class="token string">&quot;LoadLibraryA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    hThread <span class="token operator">=</span> <span class="token function">CreateRemoteThread</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LPTHREAD_START_ROUTINE<span class="token punctuation">)</span>func1<span class="token punctuation">,</span> pDllName<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>dwThread<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token keyword">if</span> <span class="token punctuation">(</span>hThread <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create remote thread failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">CloseHandle</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">CloseHandle</span><span class="token punctuation">(</span>hThread<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">CloseHandle</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">CloseHandle</span><span class="token punctuation">(</span>hThread<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br></div></div></details><p>同时<code>loader.dll</code> 在加载<code>http.dll</code> 时也需要绝对路径。</p><details class="custom-container details"><summary>loader.c</summary><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;windows.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__GNUC__</span></span>\nHANDLE k <span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">section</span><span class="token punctuation">(</span><span class="token string">&quot;.shared&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> shared<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_MSC_VER</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">data_seg</span><span class="token punctuation">(</span></span><span class="token string">&quot;.shared&quot;</span><span class="token expression"><span class="token punctuation">)</span></span></span>\nHANDLE k <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">data_seg</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">comment</span><span class="token punctuation">(</span>linker<span class="token punctuation">,</span> </span><span class="token string">&quot;/section:.shared,RWS&quot;</span><span class="token expression"><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>\n\n<span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>StartHttp<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nHMODULE hHttp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n<span class="token keyword">char</span> dllPath<span class="token punctuation">[</span>MAX_PATH<span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token operator">*</span>dllName <span class="token operator">=</span> <span class="token string">&quot;loader.dll&quot;</span><span class="token punctuation">,</span>\n    <span class="token operator">*</span>workerName <span class="token operator">=</span> <span class="token string">&quot;http.dll&quot;</span><span class="token punctuation">;</span>\n\nBOOL APIENTRY <span class="token function">DllMain</span><span class="token punctuation">(</span>HMODULE hModule<span class="token punctuation">,</span>\n                      DWORD ul_reason_for_call<span class="token punctuation">,</span>\n                      LPVOID lpReserved<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">switch</span> <span class="token punctuation">(</span>ul_reason_for_call<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> DLL_PROCESS_ATTACH<span class="token operator">:</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">// 获取http.dll 的绝对路径</span>\n        <span class="token keyword">int</span> nameLen <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>dllName<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token function">GetModuleFileName</span><span class="token punctuation">(</span>hModule<span class="token punctuation">,</span> dllPath<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>dllPath<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> fullLen <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>dllPath<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token function">memset</span><span class="token punctuation">(</span>dllPath <span class="token operator">+</span> fullLen <span class="token operator">-</span> nameLen<span class="token punctuation">,</span> <span class="token string">&#39;\\0&#39;</span><span class="token punctuation">,</span> nameLen<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">strncat</span><span class="token punctuation">(</span>dllPath<span class="token punctuation">,</span> workerName<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>workerName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        hHttp <span class="token operator">=</span> <span class="token function">LoadLibrary</span><span class="token punctuation">(</span>dllPath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// hHttp = LoadLibrary(&quot;http.dll&quot;);</span>\n        StartHttp startWorker <span class="token operator">=</span> <span class="token punctuation">(</span>StartHttp<span class="token punctuation">)</span><span class="token function">GetProcAddress</span><span class="token punctuation">(</span>hHttp<span class="token punctuation">,</span> <span class="token string">&quot;StartHttp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        k <span class="token operator">=</span> startWorker<span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">case</span> DLL_PROCESS_DETACH<span class="token operator">:</span>\n    <span class="token punctuation">{</span>\n        <span class="token function">FreeLibrary</span><span class="token punctuation">(</span>hHttp<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">case</span> DLL_THREAD_ATTACH<span class="token operator">:</span>\n    <span class="token keyword">case</span> DLL_THREAD_DETACH<span class="token operator">:</span>\n    <span class="token keyword">default</span><span class="token operator">:</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nHANDLE <span class="token function">GetHttpStarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">return</span> k<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br></div></div></details><p>重新编译，先启动<code>notepad.exe</code>，再执行<code>.\\client.exe</code>。就能在<code>notepad.exe</code> 进程上创建一个<code>http</code> 服务，访问<code>http://localhost:9999/</code> 将会看到<code>Hello World!</code> 字样。大功告成！</p><p>本文可以说是这三天思考的成果，也可以说是这两年一直想搞定的东西（<s>干坏事儿</s>）。因为C 语言虽然执行效率比较高，但是开发效率却是太低了，对开发人员要求比较高。而很多专业工具只提供了C/C++（对，没有python） 的接口，如果用C 做胶水，而实际工作用其他带GC 的高级语言，则开发效率也会高不少。</p><h2 id="参考链接"><a class="header-anchor" href="#参考链接">#</a> 参考链接</h2>',24),P={href:"https://www.cnblogs.com/DarkBright/p/10820582.html",target:"_blank",rel:"noopener noreferrer"},H=o("Win32创建远程线程"),T={href:"https://www.cnblogs.com/DarkBright/p/10821038.html",target:"_blank",rel:"noopener noreferrer"},E=o("远程线程注入DLL"),S={href:"https://www.cnblogs.com/zhangxuechao/p/11709366.html",target:"_blank",rel:"noopener noreferrer"},N=o("Windows 获取进程ID"),A={href:"https://stackoverflow.com/questions/65304131/is-it-possible-to-load-a-go-dll-in-c-dll-on-windows?noredirect=1#comment115450808_65304131",target:"_blank",rel:"noopener noreferrer"},C=o("Is it possible to load a go-dll in c-dll on Windows?"),R={href:"https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-best-practices",target:"_blank",rel:"noopener noreferrer"},O=o("Dynamic-Link Library Best Practices"),q={href:"https://forum.pellesc.de/index.php?topic=4725.0",target:"_blank",rel:"noopener noreferrer"},M=o("Shared memory segment in a C++ Class Library (DLL) using #pragma data seg");l.render=function(o,c){const l=n("OutboundLink"),x=n("CodeGroupItem"),U=n("CodeGroup");return s(),a(e,null,[r,p("p",null,[u,p("a",i,[k,p(l)]),b]),p(U,null,{default:t((()=>[p(x,{title:"宿主程序"},{default:t((()=>[m])),_:1}),p(x,{title:"测试远程线程"},{default:t((()=>[d])),_:1}),p(x,{title:"寄生程序"},{default:t((()=>[h])),_:1}),p(x,{title:"注入器"},{default:t((()=>[g])),_:1}),p(x,{title:"根据进程名获取PID"},{default:t((()=>[f])),_:1})])),_:1}),y,p("p",null,[v,p("a",w,[L,p(l)]),_]),D,p("ol",null,[p("li",null,[p("p",null,[p("a",P,[H,p(l)])])]),p("li",null,[p("p",null,[p("a",T,[E,p(l)])])]),p("li",null,[p("p",null,[p("a",S,[N,p(l)])])]),p("li",null,[p("p",null,[p("a",A,[C,p(l)])])]),p("li",null,[p("p",null,[p("a",R,[O,p(l)])])]),p("li",null,[p("p",null,[p("a",q,[M,p(l)])])])])],64)};export default l;
